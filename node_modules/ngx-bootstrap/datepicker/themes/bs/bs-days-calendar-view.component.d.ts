import { EventEmitter } from '@angular/core';
import { BsDatepickerViewMode, BsNavigationDirection, BsNavigationEvent, CellHoverEvent, DatepickerRenderOptions, DaysCalendarViewModel, DayViewModel, WeekViewModel } from '../../models';
import { BsDatepickerConfig } from '../../bs-datepicker.config';
import * as ɵngcc0 from '@angular/core';
export declare class BsDaysCalendarViewComponent {
    private _config;
    calendar: DaysCalendarViewModel;
    options: DatepickerRenderOptions;
    onNavigate: EventEmitter<BsNavigationEvent>;
    onViewMode: EventEmitter<BsDatepickerViewMode>;
    onSelect: EventEmitter<DayViewModel>;
    onHover: EventEmitter<CellHoverEvent>;
    onHoverWeek: EventEmitter<WeekViewModel>;
    isWeekHovered: boolean;
    constructor(_config: BsDatepickerConfig);
    navigateTo(event: BsNavigationDirection): void;
    changeViewMode(event: BsDatepickerViewMode): void;
    selectDay(event: DayViewModel): void;
    selectWeek(week: WeekViewModel): void;
    weekHoverHandler(cell: WeekViewModel, isHovered: boolean): void;
    hoverDay(cell: DayViewModel, isHovered: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BsDaysCalendarViewComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<BsDaysCalendarViewComponent, "bs-days-calendar-view", never, {
    "calendar": "calendar";
    "options": "options";
}, {
    "onNavigate": "onNavigate";
    "onViewMode": "onViewMode";
    "onSelect": "onSelect";
    "onHover": "onHover";
    "onHoverWeek": "onHoverWeek";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF5cy1jYWxlbmRhci12aWV3LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJicy1kYXlzLWNhbGVuZGFyLXZpZXcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCc0RhdGVwaWNrZXJWaWV3TW9kZSwgQnNOYXZpZ2F0aW9uRGlyZWN0aW9uLCBCc05hdmlnYXRpb25FdmVudCwgQ2VsbEhvdmVyRXZlbnQsIERhdGVwaWNrZXJSZW5kZXJPcHRpb25zLCBEYXlzQ2FsZW5kYXJWaWV3TW9kZWwsIERheVZpZXdNb2RlbCwgV2Vla1ZpZXdNb2RlbCB9IGZyb20gJy4uLy4uL21vZGVscyc7XHJcbmltcG9ydCB7IEJzRGF0ZXBpY2tlckNvbmZpZyB9IGZyb20gJy4uLy4uL2JzLWRhdGVwaWNrZXIuY29uZmlnJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQnNEYXlzQ2FsZW5kYXJWaWV3Q29tcG9uZW50IHtcclxuICAgIHByaXZhdGUgX2NvbmZpZztcclxuICAgIGNhbGVuZGFyOiBEYXlzQ2FsZW5kYXJWaWV3TW9kZWw7XHJcbiAgICBvcHRpb25zOiBEYXRlcGlja2VyUmVuZGVyT3B0aW9ucztcclxuICAgIG9uTmF2aWdhdGU6IEV2ZW50RW1pdHRlcjxCc05hdmlnYXRpb25FdmVudD47XHJcbiAgICBvblZpZXdNb2RlOiBFdmVudEVtaXR0ZXI8QnNEYXRlcGlja2VyVmlld01vZGU+O1xyXG4gICAgb25TZWxlY3Q6IEV2ZW50RW1pdHRlcjxEYXlWaWV3TW9kZWw+O1xyXG4gICAgb25Ib3ZlcjogRXZlbnRFbWl0dGVyPENlbGxIb3ZlckV2ZW50PjtcclxuICAgIG9uSG92ZXJXZWVrOiBFdmVudEVtaXR0ZXI8V2Vla1ZpZXdNb2RlbD47XHJcbiAgICBpc1dlZWtIb3ZlcmVkOiBib29sZWFuO1xyXG4gICAgY29uc3RydWN0b3IoX2NvbmZpZzogQnNEYXRlcGlja2VyQ29uZmlnKTtcclxuICAgIG5hdmlnYXRlVG8oZXZlbnQ6IEJzTmF2aWdhdGlvbkRpcmVjdGlvbik6IHZvaWQ7XHJcbiAgICBjaGFuZ2VWaWV3TW9kZShldmVudDogQnNEYXRlcGlja2VyVmlld01vZGUpOiB2b2lkO1xyXG4gICAgc2VsZWN0RGF5KGV2ZW50OiBEYXlWaWV3TW9kZWwpOiB2b2lkO1xyXG4gICAgc2VsZWN0V2Vlayh3ZWVrOiBXZWVrVmlld01vZGVsKTogdm9pZDtcclxuICAgIHdlZWtIb3ZlckhhbmRsZXIoY2VsbDogV2Vla1ZpZXdNb2RlbCwgaXNIb3ZlcmVkOiBib29sZWFuKTogdm9pZDtcclxuICAgIGhvdmVyRGF5KGNlbGw6IERheVZpZXdNb2RlbCwgaXNIb3ZlcmVkOiBib29sZWFuKTogdm9pZDtcclxufVxyXG4iXX0=