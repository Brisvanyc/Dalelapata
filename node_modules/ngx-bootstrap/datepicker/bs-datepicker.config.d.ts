import { DatepickerRenderOptions, BsDatepickerViewMode, DatepickerDateCustomClasses } from './models';
/**
 * For date range picker there are `BsDaterangepickerConfig` which inherits all properties,
 * except `displayMonths`, for range picker it default to `2`
 */
import * as ɵngcc0 from '@angular/core';
export declare class BsDatepickerConfig implements DatepickerRenderOptions {
    /** sets use adaptive position */
    adaptivePosition: boolean;
    /** sets use UTC date time format */
    useUtc: boolean;
    /** turn on/off animation */
    isAnimated: boolean;
    value?: Date | Date[];
    isDisabled?: boolean;
    /**
     * Default min date for all date/range pickers
     */
    minDate?: Date;
    /**
     * Default max date for all date/range pickers
     */
    maxDate?: Date;
    /**
     * Default date custom classes for all date/range pickers
     */
    dateCustomClasses: DatepickerDateCustomClasses[];
    daysDisabled?: number[];
    /**
     * Disable specific dates
     */
    datesDisabled?: Date[];
    /**
     * Makes dates from other months active
     */
    selectFromOtherMonth?: boolean;
    /**
     * Allows select first date of the week by click on week number
     */
    selectWeek?: boolean;
    /**
     * Shows previous and current month, instead of current and next (dateRangePicker only)
     */
    showPreviousMonth?: boolean;
    /**
     * Add class to current day
     */
    customTodayClass?: string;
    /**
     * Default mode for all date pickers
     */
    minMode?: BsDatepickerViewMode;
    /** CSS class which will be applied to datepicker container,
     * usually used to set color theme
     */
    containerClass: string;
    displayMonths: number;
    /**
     * Allows to hide week numbers in datepicker
     */
    showWeekNumbers: boolean;
    dateInputFormat: string;
    rangeSeparator: string;
    /**
     * Date format for date range input field
     */
    rangeInputFormat: string;
    monthTitle: string;
    yearTitle: string;
    dayLabel: string;
    monthLabel: string;
    yearLabel: string;
    weekNumbers: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BsDatepickerConfig>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BsDatepickerConfig>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXBpY2tlci5jb25maWcuZC50cyIsInNvdXJjZXMiOlsiYnMtZGF0ZXBpY2tlci5jb25maWcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1FQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGVwaWNrZXJSZW5kZXJPcHRpb25zLCBCc0RhdGVwaWNrZXJWaWV3TW9kZSwgRGF0ZXBpY2tlckRhdGVDdXN0b21DbGFzc2VzIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG4vKipcclxuICogRm9yIGRhdGUgcmFuZ2UgcGlja2VyIHRoZXJlIGFyZSBgQnNEYXRlcmFuZ2VwaWNrZXJDb25maWdgIHdoaWNoIGluaGVyaXRzIGFsbCBwcm9wZXJ0aWVzLFxyXG4gKiBleGNlcHQgYGRpc3BsYXlNb250aHNgLCBmb3IgcmFuZ2UgcGlja2VyIGl0IGRlZmF1bHQgdG8gYDJgXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCc0RhdGVwaWNrZXJDb25maWcgaW1wbGVtZW50cyBEYXRlcGlja2VyUmVuZGVyT3B0aW9ucyB7XHJcbiAgICAvKiogc2V0cyB1c2UgYWRhcHRpdmUgcG9zaXRpb24gKi9cclxuICAgIGFkYXB0aXZlUG9zaXRpb246IGJvb2xlYW47XHJcbiAgICAvKiogc2V0cyB1c2UgVVRDIGRhdGUgdGltZSBmb3JtYXQgKi9cclxuICAgIHVzZVV0YzogYm9vbGVhbjtcclxuICAgIC8qKiB0dXJuIG9uL29mZiBhbmltYXRpb24gKi9cclxuICAgIGlzQW5pbWF0ZWQ6IGJvb2xlYW47XHJcbiAgICB2YWx1ZT86IERhdGUgfCBEYXRlW107XHJcbiAgICBpc0Rpc2FibGVkPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBtaW4gZGF0ZSBmb3IgYWxsIGRhdGUvcmFuZ2UgcGlja2Vyc1xyXG4gICAgICovXHJcbiAgICBtaW5EYXRlPzogRGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBtYXggZGF0ZSBmb3IgYWxsIGRhdGUvcmFuZ2UgcGlja2Vyc1xyXG4gICAgICovXHJcbiAgICBtYXhEYXRlPzogRGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBkYXRlIGN1c3RvbSBjbGFzc2VzIGZvciBhbGwgZGF0ZS9yYW5nZSBwaWNrZXJzXHJcbiAgICAgKi9cclxuICAgIGRhdGVDdXN0b21DbGFzc2VzOiBEYXRlcGlja2VyRGF0ZUN1c3RvbUNsYXNzZXNbXTtcclxuICAgIGRheXNEaXNhYmxlZD86IG51bWJlcltdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNhYmxlIHNwZWNpZmljIGRhdGVzXHJcbiAgICAgKi9cclxuICAgIGRhdGVzRGlzYWJsZWQ/OiBEYXRlW107XHJcbiAgICAvKipcclxuICAgICAqIE1ha2VzIGRhdGVzIGZyb20gb3RoZXIgbW9udGhzIGFjdGl2ZVxyXG4gICAgICovXHJcbiAgICBzZWxlY3RGcm9tT3RoZXJNb250aD86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEFsbG93cyBzZWxlY3QgZmlyc3QgZGF0ZSBvZiB0aGUgd2VlayBieSBjbGljayBvbiB3ZWVrIG51bWJlclxyXG4gICAgICovXHJcbiAgICBzZWxlY3RXZWVrPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogU2hvd3MgcHJldmlvdXMgYW5kIGN1cnJlbnQgbW9udGgsIGluc3RlYWQgb2YgY3VycmVudCBhbmQgbmV4dCAoZGF0ZVJhbmdlUGlja2VyIG9ubHkpXHJcbiAgICAgKi9cclxuICAgIHNob3dQcmV2aW91c01vbnRoPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGNsYXNzIHRvIGN1cnJlbnQgZGF5XHJcbiAgICAgKi9cclxuICAgIGN1c3RvbVRvZGF5Q2xhc3M/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIERlZmF1bHQgbW9kZSBmb3IgYWxsIGRhdGUgcGlja2Vyc1xyXG4gICAgICovXHJcbiAgICBtaW5Nb2RlPzogQnNEYXRlcGlja2VyVmlld01vZGU7XHJcbiAgICAvKiogQ1NTIGNsYXNzIHdoaWNoIHdpbGwgYmUgYXBwbGllZCB0byBkYXRlcGlja2VyIGNvbnRhaW5lcixcclxuICAgICAqIHVzdWFsbHkgdXNlZCB0byBzZXQgY29sb3IgdGhlbWVcclxuICAgICAqL1xyXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZztcclxuICAgIGRpc3BsYXlNb250aHM6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogQWxsb3dzIHRvIGhpZGUgd2VlayBudW1iZXJzIGluIGRhdGVwaWNrZXJcclxuICAgICAqL1xyXG4gICAgc2hvd1dlZWtOdW1iZXJzOiBib29sZWFuO1xyXG4gICAgZGF0ZUlucHV0Rm9ybWF0OiBzdHJpbmc7XHJcbiAgICByYW5nZVNlcGFyYXRvcjogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEYXRlIGZvcm1hdCBmb3IgZGF0ZSByYW5nZSBpbnB1dCBmaWVsZFxyXG4gICAgICovXHJcbiAgICByYW5nZUlucHV0Rm9ybWF0OiBzdHJpbmc7XHJcbiAgICBtb250aFRpdGxlOiBzdHJpbmc7XHJcbiAgICB5ZWFyVGl0bGU6IHN0cmluZztcclxuICAgIGRheUxhYmVsOiBzdHJpbmc7XHJcbiAgICBtb250aExhYmVsOiBzdHJpbmc7XHJcbiAgICB5ZWFyTGFiZWw6IHN0cmluZztcclxuICAgIHdlZWtOdW1iZXJzOiBzdHJpbmc7XHJcbn1cclxuIl19