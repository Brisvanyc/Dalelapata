import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DateFormatter } from './date-formatter';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerInnerComponent implements OnInit, OnChanges {
    locale: string;
    datepickerMode: string;
    startingDay: number;
    yearRange: number;
    minDate: Date;
    maxDate: Date;
    minMode: string;
    maxMode: string;
    showWeeks: boolean;
    formatDay: string;
    formatMonth: string;
    formatYear: string;
    formatDayHeader: string;
    formatDayTitle: string;
    formatMonthTitle: string;
    onlyCurrentMonth: boolean;
    shortcutPropagation: boolean;
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    monthColLimit: number;
    yearColLimit: number;
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    dayDisabled: number[];
    initDate: Date;
    selectionDone: EventEmitter<Date>;
    update: EventEmitter<Date>;
    activeDateChange: EventEmitter<Date>;
    stepDay: any;
    stepMonth: any;
    stepYear: any;
    uniqueId: string;
    protected modes: string[];
    protected dateFormatter: DateFormatter;
    protected _activeDate: Date;
    protected selectedDate: Date;
    protected activeDateId: string;
    protected refreshViewHandlerDay: Function;
    protected compareHandlerDay: Function;
    protected refreshViewHandlerMonth: Function;
    protected compareHandlerMonth: Function;
    protected refreshViewHandlerYear: Function;
    protected compareHandlerYear: Function;
    activeDate: Date;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    checkIfActiveDateGotUpdated(activeDate: any): void;
    setCompareHandler(handler: Function, type: string): void;
    compare(date1: Date, date2: Date): number | undefined;
    setRefreshViewHandler(handler: Function, type: string): void;
    refreshView(): void;
    dateFilter(date: Date, format: string): string;
    isActive(dateObject: any): boolean;
    createDateObject(date: Date, format: string): any;
    split(arr: any[], size: number): any[];
    fixTimeZone(date: Date): Date;
    select(date: Date, isManual?: boolean): void;
    move(direction: number): void;
    toggleMode(_direction: number): void;
    protected getCustomClassForDate(date: Date): string;
    protected compareDateDisabled(date1Disabled: {
        date: Date;
        mode: string;
    }, date2: Date): number;
    protected isDisabled(date: Date): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerInnerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerInnerComponent, "datepicker-inner", never, {
    "activeDate": "activeDate";
    "datepickerMode": "datepickerMode";
    "locale": "locale";
    "startingDay": "startingDay";
    "yearRange": "yearRange";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minMode": "minMode";
    "maxMode": "maxMode";
    "showWeeks": "showWeeks";
    "formatDay": "formatDay";
    "formatMonth": "formatMonth";
    "formatYear": "formatYear";
    "formatDayHeader": "formatDayHeader";
    "formatDayTitle": "formatDayTitle";
    "formatMonthTitle": "formatMonthTitle";
    "onlyCurrentMonth": "onlyCurrentMonth";
    "shortcutPropagation": "shortcutPropagation";
    "customClass": "customClass";
    "monthColLimit": "monthColLimit";
    "yearColLimit": "yearColLimit";
    "dateDisabled": "dateDisabled";
    "dayDisabled": "dayDisabled";
    "initDate": "initDate";
}, {
    "selectionDone": "selectionDone";
    "update": "update";
    "activeDateChange": "activeDateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0ZUZvcm1hdHRlciB9IGZyb20gJy4vZGF0ZS1mb3JtYXR0ZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlUGlja2VySW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcbiAgICBsb2NhbGU6IHN0cmluZztcclxuICAgIGRhdGVwaWNrZXJNb2RlOiBzdHJpbmc7XHJcbiAgICBzdGFydGluZ0RheTogbnVtYmVyO1xyXG4gICAgeWVhclJhbmdlOiBudW1iZXI7XHJcbiAgICBtaW5EYXRlOiBEYXRlO1xyXG4gICAgbWF4RGF0ZTogRGF0ZTtcclxuICAgIG1pbk1vZGU6IHN0cmluZztcclxuICAgIG1heE1vZGU6IHN0cmluZztcclxuICAgIHNob3dXZWVrczogYm9vbGVhbjtcclxuICAgIGZvcm1hdERheTogc3RyaW5nO1xyXG4gICAgZm9ybWF0TW9udGg6IHN0cmluZztcclxuICAgIGZvcm1hdFllYXI6IHN0cmluZztcclxuICAgIGZvcm1hdERheUhlYWRlcjogc3RyaW5nO1xyXG4gICAgZm9ybWF0RGF5VGl0bGU6IHN0cmluZztcclxuICAgIGZvcm1hdE1vbnRoVGl0bGU6IHN0cmluZztcclxuICAgIG9ubHlDdXJyZW50TW9udGg6IGJvb2xlYW47XHJcbiAgICBzaG9ydGN1dFByb3BhZ2F0aW9uOiBib29sZWFuO1xyXG4gICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICBkYXRlOiBEYXRlO1xyXG4gICAgICAgIG1vZGU6IHN0cmluZztcclxuICAgICAgICBjbGF6ejogc3RyaW5nO1xyXG4gICAgfVtdO1xyXG4gICAgbW9udGhDb2xMaW1pdDogbnVtYmVyO1xyXG4gICAgeWVhckNvbExpbWl0OiBudW1iZXI7XHJcbiAgICBkYXRlRGlzYWJsZWQ6IHtcclxuICAgICAgICBkYXRlOiBEYXRlO1xyXG4gICAgICAgIG1vZGU6IHN0cmluZztcclxuICAgIH1bXTtcclxuICAgIGRheURpc2FibGVkOiBudW1iZXJbXTtcclxuICAgIGluaXREYXRlOiBEYXRlO1xyXG4gICAgc2VsZWN0aW9uRG9uZTogRXZlbnRFbWl0dGVyPERhdGU+O1xyXG4gICAgdXBkYXRlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XHJcbiAgICBhY3RpdmVEYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XHJcbiAgICBzdGVwRGF5OiBhbnk7XHJcbiAgICBzdGVwTW9udGg6IGFueTtcclxuICAgIHN0ZXBZZWFyOiBhbnk7XHJcbiAgICB1bmlxdWVJZDogc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIG1vZGVzOiBzdHJpbmdbXTtcclxuICAgIHByb3RlY3RlZCBkYXRlRm9ybWF0dGVyOiBEYXRlRm9ybWF0dGVyO1xyXG4gICAgcHJvdGVjdGVkIF9hY3RpdmVEYXRlOiBEYXRlO1xyXG4gICAgcHJvdGVjdGVkIHNlbGVjdGVkRGF0ZTogRGF0ZTtcclxuICAgIHByb3RlY3RlZCBhY3RpdmVEYXRlSWQ6IHN0cmluZztcclxuICAgIHByb3RlY3RlZCByZWZyZXNoVmlld0hhbmRsZXJEYXk6IEZ1bmN0aW9uO1xyXG4gICAgcHJvdGVjdGVkIGNvbXBhcmVIYW5kbGVyRGF5OiBGdW5jdGlvbjtcclxuICAgIHByb3RlY3RlZCByZWZyZXNoVmlld0hhbmRsZXJNb250aDogRnVuY3Rpb247XHJcbiAgICBwcm90ZWN0ZWQgY29tcGFyZUhhbmRsZXJNb250aDogRnVuY3Rpb247XHJcbiAgICBwcm90ZWN0ZWQgcmVmcmVzaFZpZXdIYW5kbGVyWWVhcjogRnVuY3Rpb247XHJcbiAgICBwcm90ZWN0ZWQgY29tcGFyZUhhbmRsZXJZZWFyOiBGdW5jdGlvbjtcclxuICAgIGFjdGl2ZURhdGU6IERhdGU7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBjaGVja0lmQWN0aXZlRGF0ZUdvdFVwZGF0ZWQoYWN0aXZlRGF0ZTogYW55KTogdm9pZDtcclxuICAgIHNldENvbXBhcmVIYW5kbGVyKGhhbmRsZXI6IEZ1bmN0aW9uLCB0eXBlOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgY29tcGFyZShkYXRlMTogRGF0ZSwgZGF0ZTI6IERhdGUpOiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgICBzZXRSZWZyZXNoVmlld0hhbmRsZXIoaGFuZGxlcjogRnVuY3Rpb24sIHR5cGU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICByZWZyZXNoVmlldygpOiB2b2lkO1xyXG4gICAgZGF0ZUZpbHRlcihkYXRlOiBEYXRlLCBmb3JtYXQ6IHN0cmluZyk6IHN0cmluZztcclxuICAgIGlzQWN0aXZlKGRhdGVPYmplY3Q6IGFueSk6IGJvb2xlYW47XHJcbiAgICBjcmVhdGVEYXRlT2JqZWN0KGRhdGU6IERhdGUsIGZvcm1hdDogc3RyaW5nKTogYW55O1xyXG4gICAgc3BsaXQoYXJyOiBhbnlbXSwgc2l6ZTogbnVtYmVyKTogYW55W107XHJcbiAgICBmaXhUaW1lWm9uZShkYXRlOiBEYXRlKTogRGF0ZTtcclxuICAgIHNlbGVjdChkYXRlOiBEYXRlLCBpc01hbnVhbD86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgbW92ZShkaXJlY3Rpb246IG51bWJlcik6IHZvaWQ7XHJcbiAgICB0b2dnbGVNb2RlKF9kaXJlY3Rpb246IG51bWJlcik6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgZ2V0Q3VzdG9tQ2xhc3NGb3JEYXRlKGRhdGU6IERhdGUpOiBzdHJpbmc7XHJcbiAgICBwcm90ZWN0ZWQgY29tcGFyZURhdGVEaXNhYmxlZChkYXRlMURpc2FibGVkOiB7XHJcbiAgICAgICAgZGF0ZTogRGF0ZTtcclxuICAgICAgICBtb2RlOiBzdHJpbmc7XHJcbiAgICB9LCBkYXRlMjogRGF0ZSk6IG51bWJlcjtcclxuICAgIHByb3RlY3RlZCBpc0Rpc2FibGVkKGRhdGU6IERhdGUpOiBib29sZWFuO1xyXG59XHJcbiJdfQ==