import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';
import { Subscription } from 'rxjs';
import { BsDatepickerInlineConfig } from './bs-datepicker-inline.config';
import { DatepickerDateCustomClasses } from './models';
import * as ɵngcc0 from '@angular/core';
export declare class BsDatepickerInlineDirective implements OnInit, OnDestroy, OnChanges {
    _config: BsDatepickerInlineConfig;
    private _elementRef;
    _bsValue: Date;
    /**
     * Initial value of datepicker
     */
    bsValue: Date;
    /**
     * Config object for datepicker
     */
    bsConfig: Partial<BsDatepickerInlineConfig>;
    /**
     * Indicates whether datepicker is enabled or not
     */
    isDisabled: boolean;
    /**
     * Minimum date which is available for selection
     */
    minDate: Date;
    /**
     * Maximum date which is available for selection
     */
    maxDate: Date;
    /**
     * Date custom classes
     */
    dateCustomClasses: DatepickerDateCustomClasses[];
    /**
     * Disable specific dates
     */
    datesDisabled: Date[];
    /**
     * Emits when datepicker value has been changed
     */
    bsValueChange: EventEmitter<Date>;
    protected _subs: Subscription[];
    private _datepicker;
    private _datepickerRef;
    constructor(_config: BsDatepickerInlineConfig, _elementRef: ElementRef, _renderer: Renderer2, _viewContainerRef: ViewContainerRef, cis: ComponentLoaderFactory);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Set config for datepicker
     */
    setConfig(): void;
    ngOnDestroy(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BsDatepickerInlineDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BsDatepickerInlineDirective, "bs-datepicker-inline", ["bsDatepickerInline"], {
    "bsValue": "bsValue";
    "bsConfig": "bsConfig";
    "isDisabled": "isDisabled";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "dateCustomClasses": "dateCustomClasses";
    "datesDisabled": "datesDisabled";
}, {
    "bsValueChange": "bsValueChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXBpY2tlci1pbmxpbmUuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImJzLWRhdGVwaWNrZXItaW5saW5lLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUErQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRMb2FkZXJGYWN0b3J5IH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9jb21wb25lbnQtbG9hZGVyJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEJzRGF0ZXBpY2tlcklubGluZUNvbmZpZyB9IGZyb20gJy4vYnMtZGF0ZXBpY2tlci1pbmxpbmUuY29uZmlnJztcclxuaW1wb3J0IHsgRGF0ZXBpY2tlckRhdGVDdXN0b21DbGFzc2VzIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCc0RhdGVwaWNrZXJJbmxpbmVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcclxuICAgIF9jb25maWc6IEJzRGF0ZXBpY2tlcklubGluZUNvbmZpZztcclxuICAgIHByaXZhdGUgX2VsZW1lbnRSZWY7XHJcbiAgICBfYnNWYWx1ZTogRGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogSW5pdGlhbCB2YWx1ZSBvZiBkYXRlcGlja2VyXHJcbiAgICAgKi9cclxuICAgIGJzVmFsdWU6IERhdGU7XHJcbiAgICAvKipcclxuICAgICAqIENvbmZpZyBvYmplY3QgZm9yIGRhdGVwaWNrZXJcclxuICAgICAqL1xyXG4gICAgYnNDb25maWc6IFBhcnRpYWw8QnNEYXRlcGlja2VySW5saW5lQ29uZmlnPjtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhdGVzIHdoZXRoZXIgZGF0ZXBpY2tlciBpcyBlbmFibGVkIG9yIG5vdFxyXG4gICAgICovXHJcbiAgICBpc0Rpc2FibGVkOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNaW5pbXVtIGRhdGUgd2hpY2ggaXMgYXZhaWxhYmxlIGZvciBzZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgbWluRGF0ZTogRGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogTWF4aW11bSBkYXRlIHdoaWNoIGlzIGF2YWlsYWJsZSBmb3Igc2VsZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIG1heERhdGU6IERhdGU7XHJcbiAgICAvKipcclxuICAgICAqIERhdGUgY3VzdG9tIGNsYXNzZXNcclxuICAgICAqL1xyXG4gICAgZGF0ZUN1c3RvbUNsYXNzZXM6IERhdGVwaWNrZXJEYXRlQ3VzdG9tQ2xhc3Nlc1tdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNhYmxlIHNwZWNpZmljIGRhdGVzXHJcbiAgICAgKi9cclxuICAgIGRhdGVzRGlzYWJsZWQ6IERhdGVbXTtcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgd2hlbiBkYXRlcGlja2VyIHZhbHVlIGhhcyBiZWVuIGNoYW5nZWRcclxuICAgICAqL1xyXG4gICAgYnNWYWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xyXG4gICAgcHJvdGVjdGVkIF9zdWJzOiBTdWJzY3JpcHRpb25bXTtcclxuICAgIHByaXZhdGUgX2RhdGVwaWNrZXI7XHJcbiAgICBwcml2YXRlIF9kYXRlcGlja2VyUmVmO1xyXG4gICAgY29uc3RydWN0b3IoX2NvbmZpZzogQnNEYXRlcGlja2VySW5saW5lQ29uZmlnLCBfZWxlbWVudFJlZjogRWxlbWVudFJlZiwgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIF92aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBjaXM6IENvbXBvbmVudExvYWRlckZhY3RvcnkpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgY29uZmlnIGZvciBkYXRlcGlja2VyXHJcbiAgICAgKi9cclxuICAgIHNldENvbmZpZygpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogYW55O1xyXG59XHJcbiJdfQ==