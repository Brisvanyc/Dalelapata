import { EventEmitter, Provider } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DatePickerInnerComponent } from './datepicker-inner.component';
import { DatepickerConfig } from './datepicker.config';
import * as ɵngcc0 from '@angular/core';
export declare const DATEPICKER_CONTROL_VALUE_ACCESSOR: Provider;
export declare class DatePickerComponent implements ControlValueAccessor {
    /** sets datepicker mode, supports: `day`, `month`, `year` */
    datepickerMode: string;
    /** default date to show if `ng-model` value is not specified */
    initDate: Date;
    /**  oldest selectable date */
    minDate: Date;
    /** latest selectable date */
    maxDate: Date;
    /** set lower datepicker mode, supports: `day`, `month`, `year` */
    minMode: string;
    /** sets upper datepicker mode, supports: `day`, `month`, `year` */
    maxMode: string;
    /** if false week numbers will be hidden */
    showWeeks: boolean;
    /** format of day in month */
    formatDay: string;
    /** format of month in year */
    formatMonth: string;
    /** format of year in year range */
    formatYear: string;
    /** format of day in week header */
    formatDayHeader: string;
    /** format of title when selecting day */
    formatDayTitle: string;
    /** format of title when selecting month */
    formatMonthTitle: string;
    /** starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday) */
    startingDay: number;
    /** number of years displayed in year selection */
    yearRange: number;
    /** if true only dates from the currently displayed month will be shown */
    onlyCurrentMonth: boolean;
    /** if true shortcut`s event propagation will be disabled */
    shortcutPropagation: boolean;
    /** number of months displayed in a single row of month picker */
    monthColLimit: number;
    /** number of years displayed in a single row of year picker */
    yearColLimit: number;
    /** array of custom css classes to be applied to targeted dates */
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    /** array of disabled dates */
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    /** disabled days of the week from 0-6 (0=Sunday, ..., 6=Saturday) */
    dayDisabled: number[];
    /** currently active date */
    activeDate: Date;
    selectionDone: EventEmitter<Date>;
    /** callback to invoke when the activeDate is changed. */
    activeDateChange: EventEmitter<Date>;
    _datePicker: DatePickerInnerComponent;
    onChange: any;
    onTouched: any;
    config: DatepickerConfig;
    protected _now: Date;
    protected _activeDate: Date;
    constructor(config: DatepickerConfig);
    configureOptions(): void;
    onUpdate(event: Date): void;
    onSelectionDone(event: Date): void;
    onActiveDateChange(event: Date): void;
    writeValue(value: any): void;
    registerOnChange(fn: () => void): void;
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerComponent, "datepicker", never, {
    "datepickerMode": "datepickerMode";
    "showWeeks": "showWeeks";
    "activeDate": "activeDate";
    "initDate": "initDate";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minMode": "minMode";
    "maxMode": "maxMode";
    "formatDay": "formatDay";
    "formatMonth": "formatMonth";
    "formatYear": "formatYear";
    "formatDayHeader": "formatDayHeader";
    "formatDayTitle": "formatDayTitle";
    "formatMonthTitle": "formatMonthTitle";
    "startingDay": "startingDay";
    "yearRange": "yearRange";
    "onlyCurrentMonth": "onlyCurrentMonth";
    "shortcutPropagation": "shortcutPropagation";
    "monthColLimit": "monthColLimit";
    "yearColLimit": "yearColLimit";
    "customClass": "customClass";
    "dateDisabled": "dateDisabled";
    "dayDisabled": "dayDisabled";
}, {
    "selectionDone": "selectionDone";
    "activeDateChange": "activeDateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3RUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBEYXRlUGlja2VySW5uZXJDb21wb25lbnQgfSBmcm9tICcuL2RhdGVwaWNrZXItaW5uZXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRGF0ZXBpY2tlckNvbmZpZyB9IGZyb20gJy4vZGF0ZXBpY2tlci5jb25maWcnO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBEQVRFUElDS0VSX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IFByb3ZpZGVyO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEYXRlUGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xyXG4gICAgLyoqIHNldHMgZGF0ZXBpY2tlciBtb2RlLCBzdXBwb3J0czogYGRheWAsIGBtb250aGAsIGB5ZWFyYCAqL1xyXG4gICAgZGF0ZXBpY2tlck1vZGU6IHN0cmluZztcclxuICAgIC8qKiBkZWZhdWx0IGRhdGUgdG8gc2hvdyBpZiBgbmctbW9kZWxgIHZhbHVlIGlzIG5vdCBzcGVjaWZpZWQgKi9cclxuICAgIGluaXREYXRlOiBEYXRlO1xyXG4gICAgLyoqICBvbGRlc3Qgc2VsZWN0YWJsZSBkYXRlICovXHJcbiAgICBtaW5EYXRlOiBEYXRlO1xyXG4gICAgLyoqIGxhdGVzdCBzZWxlY3RhYmxlIGRhdGUgKi9cclxuICAgIG1heERhdGU6IERhdGU7XHJcbiAgICAvKiogc2V0IGxvd2VyIGRhdGVwaWNrZXIgbW9kZSwgc3VwcG9ydHM6IGBkYXlgLCBgbW9udGhgLCBgeWVhcmAgKi9cclxuICAgIG1pbk1vZGU6IHN0cmluZztcclxuICAgIC8qKiBzZXRzIHVwcGVyIGRhdGVwaWNrZXIgbW9kZSwgc3VwcG9ydHM6IGBkYXlgLCBgbW9udGhgLCBgeWVhcmAgKi9cclxuICAgIG1heE1vZGU6IHN0cmluZztcclxuICAgIC8qKiBpZiBmYWxzZSB3ZWVrIG51bWJlcnMgd2lsbCBiZSBoaWRkZW4gKi9cclxuICAgIHNob3dXZWVrczogYm9vbGVhbjtcclxuICAgIC8qKiBmb3JtYXQgb2YgZGF5IGluIG1vbnRoICovXHJcbiAgICBmb3JtYXREYXk6IHN0cmluZztcclxuICAgIC8qKiBmb3JtYXQgb2YgbW9udGggaW4geWVhciAqL1xyXG4gICAgZm9ybWF0TW9udGg6IHN0cmluZztcclxuICAgIC8qKiBmb3JtYXQgb2YgeWVhciBpbiB5ZWFyIHJhbmdlICovXHJcbiAgICBmb3JtYXRZZWFyOiBzdHJpbmc7XHJcbiAgICAvKiogZm9ybWF0IG9mIGRheSBpbiB3ZWVrIGhlYWRlciAqL1xyXG4gICAgZm9ybWF0RGF5SGVhZGVyOiBzdHJpbmc7XHJcbiAgICAvKiogZm9ybWF0IG9mIHRpdGxlIHdoZW4gc2VsZWN0aW5nIGRheSAqL1xyXG4gICAgZm9ybWF0RGF5VGl0bGU6IHN0cmluZztcclxuICAgIC8qKiBmb3JtYXQgb2YgdGl0bGUgd2hlbiBzZWxlY3RpbmcgbW9udGggKi9cclxuICAgIGZvcm1hdE1vbnRoVGl0bGU6IHN0cmluZztcclxuICAgIC8qKiBzdGFydGluZyBkYXkgb2YgdGhlIHdlZWsgZnJvbSAwLTYgKDA9U3VuZGF5LCAuLi4sIDY9U2F0dXJkYXkpICovXHJcbiAgICBzdGFydGluZ0RheTogbnVtYmVyO1xyXG4gICAgLyoqIG51bWJlciBvZiB5ZWFycyBkaXNwbGF5ZWQgaW4geWVhciBzZWxlY3Rpb24gKi9cclxuICAgIHllYXJSYW5nZTogbnVtYmVyO1xyXG4gICAgLyoqIGlmIHRydWUgb25seSBkYXRlcyBmcm9tIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIG1vbnRoIHdpbGwgYmUgc2hvd24gKi9cclxuICAgIG9ubHlDdXJyZW50TW9udGg6IGJvb2xlYW47XHJcbiAgICAvKiogaWYgdHJ1ZSBzaG9ydGN1dGBzIGV2ZW50IHByb3BhZ2F0aW9uIHdpbGwgYmUgZGlzYWJsZWQgKi9cclxuICAgIHNob3J0Y3V0UHJvcGFnYXRpb246IGJvb2xlYW47XHJcbiAgICAvKiogbnVtYmVyIG9mIG1vbnRocyBkaXNwbGF5ZWQgaW4gYSBzaW5nbGUgcm93IG9mIG1vbnRoIHBpY2tlciAqL1xyXG4gICAgbW9udGhDb2xMaW1pdDogbnVtYmVyO1xyXG4gICAgLyoqIG51bWJlciBvZiB5ZWFycyBkaXNwbGF5ZWQgaW4gYSBzaW5nbGUgcm93IG9mIHllYXIgcGlja2VyICovXHJcbiAgICB5ZWFyQ29sTGltaXQ6IG51bWJlcjtcclxuICAgIC8qKiBhcnJheSBvZiBjdXN0b20gY3NzIGNsYXNzZXMgdG8gYmUgYXBwbGllZCB0byB0YXJnZXRlZCBkYXRlcyAqL1xyXG4gICAgY3VzdG9tQ2xhc3M6IHtcclxuICAgICAgICBkYXRlOiBEYXRlO1xyXG4gICAgICAgIG1vZGU6IHN0cmluZztcclxuICAgICAgICBjbGF6ejogc3RyaW5nO1xyXG4gICAgfVtdO1xyXG4gICAgLyoqIGFycmF5IG9mIGRpc2FibGVkIGRhdGVzICovXHJcbiAgICBkYXRlRGlzYWJsZWQ6IHtcclxuICAgICAgICBkYXRlOiBEYXRlO1xyXG4gICAgICAgIG1vZGU6IHN0cmluZztcclxuICAgIH1bXTtcclxuICAgIC8qKiBkaXNhYmxlZCBkYXlzIG9mIHRoZSB3ZWVrIGZyb20gMC02ICgwPVN1bmRheSwgLi4uLCA2PVNhdHVyZGF5KSAqL1xyXG4gICAgZGF5RGlzYWJsZWQ6IG51bWJlcltdO1xyXG4gICAgLyoqIGN1cnJlbnRseSBhY3RpdmUgZGF0ZSAqL1xyXG4gICAgYWN0aXZlRGF0ZTogRGF0ZTtcclxuICAgIHNlbGVjdGlvbkRvbmU6IEV2ZW50RW1pdHRlcjxEYXRlPjtcclxuICAgIC8qKiBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUgYWN0aXZlRGF0ZSBpcyBjaGFuZ2VkLiAqL1xyXG4gICAgYWN0aXZlRGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGU+O1xyXG4gICAgX2RhdGVQaWNrZXI6IERhdGVQaWNrZXJJbm5lckNvbXBvbmVudDtcclxuICAgIG9uQ2hhbmdlOiBhbnk7XHJcbiAgICBvblRvdWNoZWQ6IGFueTtcclxuICAgIGNvbmZpZzogRGF0ZXBpY2tlckNvbmZpZztcclxuICAgIHByb3RlY3RlZCBfbm93OiBEYXRlO1xyXG4gICAgcHJvdGVjdGVkIF9hY3RpdmVEYXRlOiBEYXRlO1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBEYXRlcGlja2VyQ29uZmlnKTtcclxuICAgIGNvbmZpZ3VyZU9wdGlvbnMoKTogdm9pZDtcclxuICAgIG9uVXBkYXRlKGV2ZW50OiBEYXRlKTogdm9pZDtcclxuICAgIG9uU2VsZWN0aW9uRG9uZShldmVudDogRGF0ZSk6IHZvaWQ7XHJcbiAgICBvbkFjdGl2ZURhdGVDaGFuZ2UoZXZlbnQ6IERhdGUpOiB2b2lkO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xyXG59XHJcbiJdfQ==