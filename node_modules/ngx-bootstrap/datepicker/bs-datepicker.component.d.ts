import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, ViewContainerRef } from '@angular/core';
import { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';
import { Subscription } from 'rxjs';
import { BsDatepickerConfig } from './bs-datepicker.config';
import { BsDatepickerViewMode, DatepickerDateCustomClasses } from './models';
import * as ɵngcc0 from '@angular/core';
export declare class BsDatepickerDirective implements OnInit, OnDestroy, OnChanges {
    _config: BsDatepickerConfig;
    /**
     * Placement of a datepicker. Accepts: "top", "bottom", "left", "right"
     */
    placement: 'top' | 'bottom' | 'left' | 'right';
    /**
     * Specifies events that should trigger. Supports a space separated list of
     * event names.
     */
    triggers: string;
    /**
     * Close datepicker on outside click
     */
    outsideClick: boolean;
    /**
     * A selector specifying the element the datepicker should be appended to.
     */
    container: string;
    outsideEsc: boolean;
    /**
     * Returns whether or not the datepicker is currently being shown
     */
    isOpen: boolean;
    /**
     * Emits an event when the datepicker is shown
     */
    onShown: EventEmitter<any>;
    /**
     * Emits an event when the datepicker is hidden
     */
    onHidden: EventEmitter<any>;
    _bsValue: Date;
    /**
     * Initial value of datepicker
     */
    bsValue: Date;
    /**
     * Config object for datepicker
     */
    bsConfig: Partial<BsDatepickerConfig>;
    /**
     * Indicates whether datepicker's content is enabled or not
     */
    isDisabled: boolean;
    /**
     * Minimum date which is available for selection
     */
    minDate: Date;
    /**
     * Maximum date which is available for selection
     */
    maxDate: Date;
    /**
     * Minimum view mode : day, month, or year
     */
    minMode: BsDatepickerViewMode;
    /**
     * Disable Certain days in the week
     */
    daysDisabled: number[];
    /**
     * Disable specific dates
     */
    datesDisabled: Date[];
    /**
     * Date custom classes
     */
    dateCustomClasses: DatepickerDateCustomClasses[];
    /**
     * Emits when datepicker value has been changed
     */
    bsValueChange: EventEmitter<Date>;
    protected _subs: Subscription[];
    private _datepicker;
    private _datepickerRef;
    constructor(_config: BsDatepickerConfig, _elementRef: ElementRef, _renderer: Renderer2, _viewContainerRef: ViewContainerRef, cis: ComponentLoaderFactory);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * Opens an element’s datepicker. This is considered a “manual” triggering of
     * the datepicker.
     */
    show(): void;
    /**
     * Closes an element’s datepicker. This is considered a “manual” triggering of
     * the datepicker.
     */
    hide(): void;
    /**
     * Toggles an element’s datepicker. This is considered a “manual” triggering
     * of the datepicker.
     */
    toggle(): void;
    /**
     * Set config for datepicker
     */
    setConfig(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BsDatepickerDirective>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<BsDatepickerDirective, "[bsDatepicker]", ["bsDatepicker"], {
    "placement": "placement";
    "triggers": "triggers";
    "outsideClick": "outsideClick";
    "container": "container";
    "outsideEsc": "outsideEsc";
    "isOpen": "isOpen";
    "bsValue": "bsValue";
    "bsConfig": "bsConfig";
    "isDisabled": "isDisabled";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minMode": "minMode";
    "daysDisabled": "daysDisabled";
    "datesDisabled": "datesDisabled";
    "dateCustomClasses": "dateCustomClasses";
}, {
    "bsValueChange": "bsValueChange";
    "onShown": "onShown";
    "onHidden": "onHidden";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiYnMtZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtR0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRMb2FkZXJGYWN0b3J5IH0gZnJvbSAnbmd4LWJvb3RzdHJhcC9jb21wb25lbnQtbG9hZGVyJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEJzRGF0ZXBpY2tlckNvbmZpZyB9IGZyb20gJy4vYnMtZGF0ZXBpY2tlci5jb25maWcnO1xyXG5pbXBvcnQgeyBCc0RhdGVwaWNrZXJWaWV3TW9kZSwgRGF0ZXBpY2tlckRhdGVDdXN0b21DbGFzc2VzIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBCc0RhdGVwaWNrZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIHtcclxuICAgIF9jb25maWc6IEJzRGF0ZXBpY2tlckNvbmZpZztcclxuICAgIC8qKlxyXG4gICAgICogUGxhY2VtZW50IG9mIGEgZGF0ZXBpY2tlci4gQWNjZXB0czogXCJ0b3BcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIlxyXG4gICAgICovXHJcbiAgICBwbGFjZW1lbnQ6ICd0b3AnIHwgJ2JvdHRvbScgfCAnbGVmdCcgfCAncmlnaHQnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTcGVjaWZpZXMgZXZlbnRzIHRoYXQgc2hvdWxkIHRyaWdnZXIuIFN1cHBvcnRzIGEgc3BhY2Ugc2VwYXJhdGVkIGxpc3Qgb2ZcclxuICAgICAqIGV2ZW50IG5hbWVzLlxyXG4gICAgICovXHJcbiAgICB0cmlnZ2Vyczogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDbG9zZSBkYXRlcGlja2VyIG9uIG91dHNpZGUgY2xpY2tcclxuICAgICAqL1xyXG4gICAgb3V0c2lkZUNsaWNrOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNlbGVjdG9yIHNwZWNpZnlpbmcgdGhlIGVsZW1lbnQgdGhlIGRhdGVwaWNrZXIgc2hvdWxkIGJlIGFwcGVuZGVkIHRvLlxyXG4gICAgICovXHJcbiAgICBjb250YWluZXI6IHN0cmluZztcclxuICAgIG91dHNpZGVFc2M6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGRhdGVwaWNrZXIgaXMgY3VycmVudGx5IGJlaW5nIHNob3duXHJcbiAgICAgKi9cclxuICAgIGlzT3BlbjogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgYW4gZXZlbnQgd2hlbiB0aGUgZGF0ZXBpY2tlciBpcyBzaG93blxyXG4gICAgICovXHJcbiAgICBvblNob3duOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICogRW1pdHMgYW4gZXZlbnQgd2hlbiB0aGUgZGF0ZXBpY2tlciBpcyBoaWRkZW5cclxuICAgICAqL1xyXG4gICAgb25IaWRkZW46IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgX2JzVmFsdWU6IERhdGU7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWwgdmFsdWUgb2YgZGF0ZXBpY2tlclxyXG4gICAgICovXHJcbiAgICBic1ZhbHVlOiBEYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDb25maWcgb2JqZWN0IGZvciBkYXRlcGlja2VyXHJcbiAgICAgKi9cclxuICAgIGJzQ29uZmlnOiBQYXJ0aWFsPEJzRGF0ZXBpY2tlckNvbmZpZz47XHJcbiAgICAvKipcclxuICAgICAqIEluZGljYXRlcyB3aGV0aGVyIGRhdGVwaWNrZXIncyBjb250ZW50IGlzIGVuYWJsZWQgb3Igbm90XHJcbiAgICAgKi9cclxuICAgIGlzRGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIE1pbmltdW0gZGF0ZSB3aGljaCBpcyBhdmFpbGFibGUgZm9yIHNlbGVjdGlvblxyXG4gICAgICovXHJcbiAgICBtaW5EYXRlOiBEYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXhpbXVtIGRhdGUgd2hpY2ggaXMgYXZhaWxhYmxlIGZvciBzZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgbWF4RGF0ZTogRGF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogTWluaW11bSB2aWV3IG1vZGUgOiBkYXksIG1vbnRoLCBvciB5ZWFyXHJcbiAgICAgKi9cclxuICAgIG1pbk1vZGU6IEJzRGF0ZXBpY2tlclZpZXdNb2RlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNhYmxlIENlcnRhaW4gZGF5cyBpbiB0aGUgd2Vla1xyXG4gICAgICovXHJcbiAgICBkYXlzRGlzYWJsZWQ6IG51bWJlcltdO1xyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNhYmxlIHNwZWNpZmljIGRhdGVzXHJcbiAgICAgKi9cclxuICAgIGRhdGVzRGlzYWJsZWQ6IERhdGVbXTtcclxuICAgIC8qKlxyXG4gICAgICogRGF0ZSBjdXN0b20gY2xhc3Nlc1xyXG4gICAgICovXHJcbiAgICBkYXRlQ3VzdG9tQ2xhc3NlczogRGF0ZXBpY2tlckRhdGVDdXN0b21DbGFzc2VzW107XHJcbiAgICAvKipcclxuICAgICAqIEVtaXRzIHdoZW4gZGF0ZXBpY2tlciB2YWx1ZSBoYXMgYmVlbiBjaGFuZ2VkXHJcbiAgICAgKi9cclxuICAgIGJzVmFsdWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcclxuICAgIHByb3RlY3RlZCBfc3ViczogU3Vic2NyaXB0aW9uW107XHJcbiAgICBwcml2YXRlIF9kYXRlcGlja2VyO1xyXG4gICAgcHJpdmF0ZSBfZGF0ZXBpY2tlclJlZjtcclxuICAgIGNvbnN0cnVjdG9yKF9jb25maWc6IEJzRGF0ZXBpY2tlckNvbmZpZywgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgY2lzOiBDb21wb25lbnRMb2FkZXJGYWN0b3J5KTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogT3BlbnMgYW4gZWxlbWVudOKAmXMgZGF0ZXBpY2tlci4gVGhpcyBpcyBjb25zaWRlcmVkIGEg4oCcbWFudWFs4oCdIHRyaWdnZXJpbmcgb2ZcclxuICAgICAqIHRoZSBkYXRlcGlja2VyLlxyXG4gICAgICovXHJcbiAgICBzaG93KCk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlcyBhbiBlbGVtZW504oCZcyBkYXRlcGlja2VyLiBUaGlzIGlzIGNvbnNpZGVyZWQgYSDigJxtYW51YWzigJ0gdHJpZ2dlcmluZyBvZlxyXG4gICAgICogdGhlIGRhdGVwaWNrZXIuXHJcbiAgICAgKi9cclxuICAgIGhpZGUoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVG9nZ2xlcyBhbiBlbGVtZW504oCZcyBkYXRlcGlja2VyLiBUaGlzIGlzIGNvbnNpZGVyZWQgYSDigJxtYW51YWzigJ0gdHJpZ2dlcmluZ1xyXG4gICAgICogb2YgdGhlIGRhdGVwaWNrZXIuXHJcbiAgICAgKi9cclxuICAgIHRvZ2dsZSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgY29uZmlnIGZvciBkYXRlcGlja2VyXHJcbiAgICAgKi9cclxuICAgIHNldENvbmZpZygpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxufVxyXG4iXX0=