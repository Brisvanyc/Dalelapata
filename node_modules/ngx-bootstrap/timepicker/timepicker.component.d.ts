import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TimepickerActions } from './reducer/timepicker.actions';
import { TimepickerStore } from './reducer/timepicker.store';
import { TimepickerConfig } from './timepicker.config';
import { TimeChangeSource, TimepickerComponentState, TimepickerControls } from './timepicker.models';
import { Subscription } from 'rxjs';
import { ControlValueAccessorModel } from './models';
import * as ɵngcc0 from '@angular/core';
export declare const TIMEPICKER_CONTROL_VALUE_ACCESSOR: ControlValueAccessorModel;
export declare class TimepickerComponent implements ControlValueAccessor, TimepickerComponentState, TimepickerControls, OnChanges, OnDestroy {
    private _cd;
    private _store;
    private _timepickerActions;
    /** hours change step */
    hourStep: number;
    /** hours change step */
    minuteStep: number;
    /** seconds change step */
    secondsStep: number;
    /** if true hours and minutes fields will be readonly */
    readonlyInput: boolean;
    /** if true hours and minutes fields will be disabled */
    disabled: boolean;
    /** if true scroll inside hours and minutes inputs will change time */
    mousewheel: boolean;
    /** if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard */
    arrowkeys: boolean;
    /** if true spinner arrows above and below the inputs will be shown */
    showSpinners: boolean;
    /** if true meridian button will be shown */
    showMeridian: boolean;
    /** show minutes in timepicker */
    showMinutes: boolean;
    /** show seconds in timepicker */
    showSeconds: boolean;
    /** meridian labels based on locale */
    meridians: string[];
    /** minimum time user can select */
    min: Date;
    /** maximum time user can select */
    max: Date;
    /** placeholder for hours field in timepicker */
    hoursPlaceholder: string;
    /** placeholder for minutes field in timepicker */
    minutesPlaceholder: string;
    /** placeholder for seconds field in timepicker */
    secondsPlaceholder: string;
    /** emits true if value is a valid date */
    isValid: EventEmitter<boolean>;
    hours: string;
    minutes: string;
    seconds: string;
    meridian: string;
    /** @deprecated - please use `isEditable` instead */
    readonly isSpinnersVisible: boolean;
    readonly isEditable: boolean;
    invalidHours: boolean;
    invalidMinutes: boolean;
    invalidSeconds: boolean;
    labelHours: string;
    labelMinutes: string;
    labelSeconds: string;
    canIncrementHours: boolean;
    canIncrementMinutes: boolean;
    canIncrementSeconds: boolean;
    canDecrementHours: boolean;
    canDecrementMinutes: boolean;
    canDecrementSeconds: boolean;
    canToggleMeridian: boolean;
    onChange: Function;
    onTouched: Function;
    timepickerSub: Subscription;
    constructor(_config: TimepickerConfig, _cd: ChangeDetectorRef, _store: TimepickerStore, _timepickerActions: TimepickerActions);
    resetValidation(): void;
    isPM(): boolean;
    prevDef($event: Event): void;
    wheelSign($event: WheelEventInit): number;
    ngOnChanges(changes: SimpleChanges): void;
    changeHours(step: number, source?: TimeChangeSource): void;
    changeMinutes(step: number, source?: TimeChangeSource): void;
    changeSeconds(step: number, source?: TimeChangeSource): void;
    updateHours(hours: string): void;
    updateMinutes(minutes: string): void;
    updateSeconds(seconds: string): void;
    isValidLimit(): boolean;
    _updateTime(): void;
    toggleMeridian(): void;
    /**
     * Write a new value to the element.
     */
    writeValue(obj: string | null | undefined | Date): void;
    /**
     * Set the function to be called when the control receives a change event.
     */
    registerOnChange(fn: (_: any) => {}): void;
    /**
     * Set the function to be called when the control receives a touch event.
     */
    registerOnTouched(fn: () => {}): void;
    /**
     * This function is called when the control status changes to or from "disabled".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     *
     * @param isDisabled
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    private _renderTime;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TimepickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TimepickerComponent, "timepicker", never, {
    "disabled": "disabled";
    "hourStep": "hourStep";
    "minuteStep": "minuteStep";
    "secondsStep": "secondsStep";
    "readonlyInput": "readonlyInput";
    "mousewheel": "mousewheel";
    "arrowkeys": "arrowkeys";
    "showSpinners": "showSpinners";
    "showMeridian": "showMeridian";
    "showMinutes": "showMinutes";
    "showSeconds": "showSeconds";
    "meridians": "meridians";
    "min": "min";
    "max": "max";
    "hoursPlaceholder": "hoursPlaceholder";
    "minutesPlaceholder": "minutesPlaceholder";
    "secondsPlaceholder": "secondsPlaceholder";
}, {
    "isValid": "isValid";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGltZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0dBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFRpbWVwaWNrZXJBY3Rpb25zIH0gZnJvbSAnLi9yZWR1Y2VyL3RpbWVwaWNrZXIuYWN0aW9ucyc7XHJcbmltcG9ydCB7IFRpbWVwaWNrZXJTdG9yZSB9IGZyb20gJy4vcmVkdWNlci90aW1lcGlja2VyLnN0b3JlJztcclxuaW1wb3J0IHsgVGltZXBpY2tlckNvbmZpZyB9IGZyb20gJy4vdGltZXBpY2tlci5jb25maWcnO1xyXG5pbXBvcnQgeyBUaW1lQ2hhbmdlU291cmNlLCBUaW1lcGlja2VyQ29tcG9uZW50U3RhdGUsIFRpbWVwaWNrZXJDb250cm9scyB9IGZyb20gJy4vdGltZXBpY2tlci5tb2RlbHMnO1xyXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3JNb2RlbCB9IGZyb20gJy4vbW9kZWxzJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgVElNRVBJQ0tFUl9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBDb250cm9sVmFsdWVBY2Nlc3Nvck1vZGVsO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUaW1lcGlja2VyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFRpbWVwaWNrZXJDb21wb25lbnRTdGF0ZSwgVGltZXBpY2tlckNvbnRyb2xzLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIF9jZDtcclxuICAgIHByaXZhdGUgX3N0b3JlO1xyXG4gICAgcHJpdmF0ZSBfdGltZXBpY2tlckFjdGlvbnM7XHJcbiAgICAvKiogaG91cnMgY2hhbmdlIHN0ZXAgKi9cclxuICAgIGhvdXJTdGVwOiBudW1iZXI7XHJcbiAgICAvKiogaG91cnMgY2hhbmdlIHN0ZXAgKi9cclxuICAgIG1pbnV0ZVN0ZXA6IG51bWJlcjtcclxuICAgIC8qKiBzZWNvbmRzIGNoYW5nZSBzdGVwICovXHJcbiAgICBzZWNvbmRzU3RlcDogbnVtYmVyO1xyXG4gICAgLyoqIGlmIHRydWUgaG91cnMgYW5kIG1pbnV0ZXMgZmllbGRzIHdpbGwgYmUgcmVhZG9ubHkgKi9cclxuICAgIHJlYWRvbmx5SW5wdXQ6IGJvb2xlYW47XHJcbiAgICAvKiogaWYgdHJ1ZSBob3VycyBhbmQgbWludXRlcyBmaWVsZHMgd2lsbCBiZSBkaXNhYmxlZCAqL1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogaWYgdHJ1ZSBzY3JvbGwgaW5zaWRlIGhvdXJzIGFuZCBtaW51dGVzIGlucHV0cyB3aWxsIGNoYW5nZSB0aW1lICovXHJcbiAgICBtb3VzZXdoZWVsOiBib29sZWFuO1xyXG4gICAgLyoqIGlmIHRydWUgdGhlIHZhbHVlcyBvZiBob3VycyBhbmQgbWludXRlcyBjYW4gYmUgY2hhbmdlZCB1c2luZyB0aGUgdXAvZG93biBhcnJvdyBrZXlzIG9uIHRoZSBrZXlib2FyZCAqL1xyXG4gICAgYXJyb3drZXlzOiBib29sZWFuO1xyXG4gICAgLyoqIGlmIHRydWUgc3Bpbm5lciBhcnJvd3MgYWJvdmUgYW5kIGJlbG93IHRoZSBpbnB1dHMgd2lsbCBiZSBzaG93biAqL1xyXG4gICAgc2hvd1NwaW5uZXJzOiBib29sZWFuO1xyXG4gICAgLyoqIGlmIHRydWUgbWVyaWRpYW4gYnV0dG9uIHdpbGwgYmUgc2hvd24gKi9cclxuICAgIHNob3dNZXJpZGlhbjogYm9vbGVhbjtcclxuICAgIC8qKiBzaG93IG1pbnV0ZXMgaW4gdGltZXBpY2tlciAqL1xyXG4gICAgc2hvd01pbnV0ZXM6IGJvb2xlYW47XHJcbiAgICAvKiogc2hvdyBzZWNvbmRzIGluIHRpbWVwaWNrZXIgKi9cclxuICAgIHNob3dTZWNvbmRzOiBib29sZWFuO1xyXG4gICAgLyoqIG1lcmlkaWFuIGxhYmVscyBiYXNlZCBvbiBsb2NhbGUgKi9cclxuICAgIG1lcmlkaWFuczogc3RyaW5nW107XHJcbiAgICAvKiogbWluaW11bSB0aW1lIHVzZXIgY2FuIHNlbGVjdCAqL1xyXG4gICAgbWluOiBEYXRlO1xyXG4gICAgLyoqIG1heGltdW0gdGltZSB1c2VyIGNhbiBzZWxlY3QgKi9cclxuICAgIG1heDogRGF0ZTtcclxuICAgIC8qKiBwbGFjZWhvbGRlciBmb3IgaG91cnMgZmllbGQgaW4gdGltZXBpY2tlciAqL1xyXG4gICAgaG91cnNQbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgLyoqIHBsYWNlaG9sZGVyIGZvciBtaW51dGVzIGZpZWxkIGluIHRpbWVwaWNrZXIgKi9cclxuICAgIG1pbnV0ZXNQbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgLyoqIHBsYWNlaG9sZGVyIGZvciBzZWNvbmRzIGZpZWxkIGluIHRpbWVwaWNrZXIgKi9cclxuICAgIHNlY29uZHNQbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgLyoqIGVtaXRzIHRydWUgaWYgdmFsdWUgaXMgYSB2YWxpZCBkYXRlICovXHJcbiAgICBpc1ZhbGlkOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICBob3Vyczogc3RyaW5nO1xyXG4gICAgbWludXRlczogc3RyaW5nO1xyXG4gICAgc2Vjb25kczogc3RyaW5nO1xyXG4gICAgbWVyaWRpYW46IHN0cmluZztcclxuICAgIC8qKiBAZGVwcmVjYXRlZCAtIHBsZWFzZSB1c2UgYGlzRWRpdGFibGVgIGluc3RlYWQgKi9cclxuICAgIHJlYWRvbmx5IGlzU3Bpbm5lcnNWaXNpYmxlOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHkgaXNFZGl0YWJsZTogYm9vbGVhbjtcclxuICAgIGludmFsaWRIb3VyczogYm9vbGVhbjtcclxuICAgIGludmFsaWRNaW51dGVzOiBib29sZWFuO1xyXG4gICAgaW52YWxpZFNlY29uZHM6IGJvb2xlYW47XHJcbiAgICBsYWJlbEhvdXJzOiBzdHJpbmc7XHJcbiAgICBsYWJlbE1pbnV0ZXM6IHN0cmluZztcclxuICAgIGxhYmVsU2Vjb25kczogc3RyaW5nO1xyXG4gICAgY2FuSW5jcmVtZW50SG91cnM6IGJvb2xlYW47XHJcbiAgICBjYW5JbmNyZW1lbnRNaW51dGVzOiBib29sZWFuO1xyXG4gICAgY2FuSW5jcmVtZW50U2Vjb25kczogYm9vbGVhbjtcclxuICAgIGNhbkRlY3JlbWVudEhvdXJzOiBib29sZWFuO1xyXG4gICAgY2FuRGVjcmVtZW50TWludXRlczogYm9vbGVhbjtcclxuICAgIGNhbkRlY3JlbWVudFNlY29uZHM6IGJvb2xlYW47XHJcbiAgICBjYW5Ub2dnbGVNZXJpZGlhbjogYm9vbGVhbjtcclxuICAgIG9uQ2hhbmdlOiBGdW5jdGlvbjtcclxuICAgIG9uVG91Y2hlZDogRnVuY3Rpb247XHJcbiAgICB0aW1lcGlja2VyU3ViOiBTdWJzY3JpcHRpb247XHJcbiAgICBjb25zdHJ1Y3RvcihfY29uZmlnOiBUaW1lcGlja2VyQ29uZmlnLCBfY2Q6IENoYW5nZURldGVjdG9yUmVmLCBfc3RvcmU6IFRpbWVwaWNrZXJTdG9yZSwgX3RpbWVwaWNrZXJBY3Rpb25zOiBUaW1lcGlja2VyQWN0aW9ucyk7XHJcbiAgICByZXNldFZhbGlkYXRpb24oKTogdm9pZDtcclxuICAgIGlzUE0oKTogYm9vbGVhbjtcclxuICAgIHByZXZEZWYoJGV2ZW50OiBFdmVudCk6IHZvaWQ7XHJcbiAgICB3aGVlbFNpZ24oJGV2ZW50OiBXaGVlbEV2ZW50SW5pdCk6IG51bWJlcjtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgY2hhbmdlSG91cnMoc3RlcDogbnVtYmVyLCBzb3VyY2U/OiBUaW1lQ2hhbmdlU291cmNlKTogdm9pZDtcclxuICAgIGNoYW5nZU1pbnV0ZXMoc3RlcDogbnVtYmVyLCBzb3VyY2U/OiBUaW1lQ2hhbmdlU291cmNlKTogdm9pZDtcclxuICAgIGNoYW5nZVNlY29uZHMoc3RlcDogbnVtYmVyLCBzb3VyY2U/OiBUaW1lQ2hhbmdlU291cmNlKTogdm9pZDtcclxuICAgIHVwZGF0ZUhvdXJzKGhvdXJzOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgdXBkYXRlTWludXRlcyhtaW51dGVzOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgdXBkYXRlU2Vjb25kcyhzZWNvbmRzOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgaXNWYWxpZExpbWl0KCk6IGJvb2xlYW47XHJcbiAgICBfdXBkYXRlVGltZSgpOiB2b2lkO1xyXG4gICAgdG9nZ2xlTWVyaWRpYW4oKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYSBuZXcgdmFsdWUgdG8gdGhlIGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlVmFsdWUob2JqOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkIHwgRGF0ZSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGNvbnRyb2wgcmVjZWl2ZXMgYSBjaGFuZ2UgZXZlbnQuXHJcbiAgICAgKi9cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHt9KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogU2V0IHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCByZWNlaXZlcyBhIHRvdWNoIGV2ZW50LlxyXG4gICAgICovXHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4ge30pOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIHRoZSBjb250cm9sIHN0YXR1cyBjaGFuZ2VzIHRvIG9yIGZyb20gXCJkaXNhYmxlZFwiLlxyXG4gICAgICogRGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSwgaXQgd2lsbCBlbmFibGUgb3IgZGlzYWJsZSB0aGUgYXBwcm9wcmlhdGUgRE9NIGVsZW1lbnQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlzRGlzYWJsZWRcclxuICAgICAqL1xyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIF9yZW5kZXJUaW1lO1xyXG59XHJcbiJdfQ==