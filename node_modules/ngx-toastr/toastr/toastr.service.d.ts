import { ComponentRef, Injector, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { Overlay } from '../overlay/overlay';
import { ToastRef } from './toast-injector';
import { ToastContainerDirective } from './toast.directive';
import { GlobalConfig, IndividualConfig, ToastToken } from './toastr-config';
import * as ɵngcc0 from '@angular/core';
export interface ActiveToast<C> {
    /** Your Toast ID. Use this to close it individually */
    toastId: number;
    /** the message of your toast. Stored to prevent duplicates */
    message: string;
    /** a reference to the component see portal.ts */
    portal: ComponentRef<C>;
    /** a reference to your toast */
    toastRef: ToastRef<C>;
    /** triggered when toast is active */
    onShown: Observable<any>;
    /** triggered when toast is destroyed */
    onHidden: Observable<any>;
    /** triggered on toast click */
    onTap: Observable<any>;
    /** available for your use in custom toast */
    onAction: Observable<any>;
}
export declare class ToastrService {
    private overlay;
    private _injector;
    private sanitizer;
    private ngZone;
    toastrConfig: GlobalConfig;
    currentlyActive: number;
    toasts: ActiveToast<any>[];
    overlayContainer: ToastContainerDirective;
    previousToastMessage: string | undefined;
    private index;
    constructor(token: ToastToken, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer, ngZone: NgZone);
    /** show toast */
    show(message?: string, title?: string, override?: Partial<IndividualConfig>, type?: string): ActiveToast<any>;
    /** show successful toast */
    success(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /** show error toast */
    error(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /** show info toast */
    info(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /** show warning toast */
    warning(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;
    /**
     * Remove all or a single toast by id
     */
    clear(toastId?: number): void;
    /**
     * Remove and destroy a single toast by id
     */
    remove(toastId: number): boolean;
    /**
     * Determines if toast message is already shown
     */
    findDuplicate(message: string, resetOnDuplicate: boolean, countDuplicates: boolean): ActiveToast<any>;
    /** create a clone of global config and apply individual settings */
    private applyConfig;
    /**
     * Find toast object by id
     */
    private _findToast;
    /**
     * Determines the need to run inside angular's zone then builds the toast
     */
    private _preBuildNotification;
    /**
     * Creates and attaches toast data to component
     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.
     */
    private _buildNotification;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ToastrService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3RyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsidG9hc3RyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYsIEluamVjdG9yLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgT3ZlcmxheSB9IGZyb20gJy4uL292ZXJsYXkvb3ZlcmxheSc7XHJcbmltcG9ydCB7IFRvYXN0UmVmIH0gZnJvbSAnLi90b2FzdC1pbmplY3Rvcic7XHJcbmltcG9ydCB7IFRvYXN0Q29udGFpbmVyRGlyZWN0aXZlIH0gZnJvbSAnLi90b2FzdC5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBHbG9iYWxDb25maWcsIEluZGl2aWR1YWxDb25maWcsIFRvYXN0VG9rZW4gfSBmcm9tICcuL3RvYXN0ci1jb25maWcnO1xyXG5leHBvcnQgaW50ZXJmYWNlIEFjdGl2ZVRvYXN0PEM+IHtcclxuICAgIC8qKiBZb3VyIFRvYXN0IElELiBVc2UgdGhpcyB0byBjbG9zZSBpdCBpbmRpdmlkdWFsbHkgKi9cclxuICAgIHRvYXN0SWQ6IG51bWJlcjtcclxuICAgIC8qKiB0aGUgbWVzc2FnZSBvZiB5b3VyIHRvYXN0LiBTdG9yZWQgdG8gcHJldmVudCBkdXBsaWNhdGVzICovXHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgICAvKiogYSByZWZlcmVuY2UgdG8gdGhlIGNvbXBvbmVudCBzZWUgcG9ydGFsLnRzICovXHJcbiAgICBwb3J0YWw6IENvbXBvbmVudFJlZjxDPjtcclxuICAgIC8qKiBhIHJlZmVyZW5jZSB0byB5b3VyIHRvYXN0ICovXHJcbiAgICB0b2FzdFJlZjogVG9hc3RSZWY8Qz47XHJcbiAgICAvKiogdHJpZ2dlcmVkIHdoZW4gdG9hc3QgaXMgYWN0aXZlICovXHJcbiAgICBvblNob3duOiBPYnNlcnZhYmxlPGFueT47XHJcbiAgICAvKiogdHJpZ2dlcmVkIHdoZW4gdG9hc3QgaXMgZGVzdHJveWVkICovXHJcbiAgICBvbkhpZGRlbjogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgLyoqIHRyaWdnZXJlZCBvbiB0b2FzdCBjbGljayAqL1xyXG4gICAgb25UYXA6IE9ic2VydmFibGU8YW55PjtcclxuICAgIC8qKiBhdmFpbGFibGUgZm9yIHlvdXIgdXNlIGluIGN1c3RvbSB0b2FzdCAqL1xyXG4gICAgb25BY3Rpb246IE9ic2VydmFibGU8YW55PjtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUb2FzdHJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgb3ZlcmxheTtcclxuICAgIHByaXZhdGUgX2luamVjdG9yO1xyXG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XHJcbiAgICBwcml2YXRlIG5nWm9uZTtcclxuICAgIHRvYXN0ckNvbmZpZzogR2xvYmFsQ29uZmlnO1xyXG4gICAgY3VycmVudGx5QWN0aXZlOiBudW1iZXI7XHJcbiAgICB0b2FzdHM6IEFjdGl2ZVRvYXN0PGFueT5bXTtcclxuICAgIG92ZXJsYXlDb250YWluZXI6IFRvYXN0Q29udGFpbmVyRGlyZWN0aXZlO1xyXG4gICAgcHJldmlvdXNUb2FzdE1lc3NhZ2U6IHN0cmluZyB8IHVuZGVmaW5lZDtcclxuICAgIHByaXZhdGUgaW5kZXg7XHJcbiAgICBjb25zdHJ1Y3Rvcih0b2tlbjogVG9hc3RUb2tlbiwgb3ZlcmxheTogT3ZlcmxheSwgX2luamVjdG9yOiBJbmplY3Rvciwgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIG5nWm9uZTogTmdab25lKTtcclxuICAgIC8qKiBzaG93IHRvYXN0ICovXHJcbiAgICBzaG93KG1lc3NhZ2U/OiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvdmVycmlkZT86IFBhcnRpYWw8SW5kaXZpZHVhbENvbmZpZz4sIHR5cGU/OiBzdHJpbmcpOiBBY3RpdmVUb2FzdDxhbnk+O1xyXG4gICAgLyoqIHNob3cgc3VjY2Vzc2Z1bCB0b2FzdCAqL1xyXG4gICAgc3VjY2VzcyhtZXNzYWdlPzogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgb3ZlcnJpZGU/OiBQYXJ0aWFsPEluZGl2aWR1YWxDb25maWc+KTogQWN0aXZlVG9hc3Q8YW55PjtcclxuICAgIC8qKiBzaG93IGVycm9yIHRvYXN0ICovXHJcbiAgICBlcnJvcihtZXNzYWdlPzogc3RyaW5nLCB0aXRsZT86IHN0cmluZywgb3ZlcnJpZGU/OiBQYXJ0aWFsPEluZGl2aWR1YWxDb25maWc+KTogQWN0aXZlVG9hc3Q8YW55PjtcclxuICAgIC8qKiBzaG93IGluZm8gdG9hc3QgKi9cclxuICAgIGluZm8obWVzc2FnZT86IHN0cmluZywgdGl0bGU/OiBzdHJpbmcsIG92ZXJyaWRlPzogUGFydGlhbDxJbmRpdmlkdWFsQ29uZmlnPik6IEFjdGl2ZVRvYXN0PGFueT47XHJcbiAgICAvKiogc2hvdyB3YXJuaW5nIHRvYXN0ICovXHJcbiAgICB3YXJuaW5nKG1lc3NhZ2U/OiBzdHJpbmcsIHRpdGxlPzogc3RyaW5nLCBvdmVycmlkZT86IFBhcnRpYWw8SW5kaXZpZHVhbENvbmZpZz4pOiBBY3RpdmVUb2FzdDxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYWxsIG9yIGEgc2luZ2xlIHRvYXN0IGJ5IGlkXHJcbiAgICAgKi9cclxuICAgIGNsZWFyKHRvYXN0SWQ/OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYW5kIGRlc3Ryb3kgYSBzaW5nbGUgdG9hc3QgYnkgaWRcclxuICAgICAqL1xyXG4gICAgcmVtb3ZlKHRvYXN0SWQ6IG51bWJlcik6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIERldGVybWluZXMgaWYgdG9hc3QgbWVzc2FnZSBpcyBhbHJlYWR5IHNob3duXHJcbiAgICAgKi9cclxuICAgIGZpbmREdXBsaWNhdGUobWVzc2FnZTogc3RyaW5nLCByZXNldE9uRHVwbGljYXRlOiBib29sZWFuLCBjb3VudER1cGxpY2F0ZXM6IGJvb2xlYW4pOiBBY3RpdmVUb2FzdDxhbnk+O1xyXG4gICAgLyoqIGNyZWF0ZSBhIGNsb25lIG9mIGdsb2JhbCBjb25maWcgYW5kIGFwcGx5IGluZGl2aWR1YWwgc2V0dGluZ3MgKi9cclxuICAgIHByaXZhdGUgYXBwbHlDb25maWc7XHJcbiAgICAvKipcclxuICAgICAqIEZpbmQgdG9hc3Qgb2JqZWN0IGJ5IGlkXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX2ZpbmRUb2FzdDtcclxuICAgIC8qKlxyXG4gICAgICogRGV0ZXJtaW5lcyB0aGUgbmVlZCB0byBydW4gaW5zaWRlIGFuZ3VsYXIncyB6b25lIHRoZW4gYnVpbGRzIHRoZSB0b2FzdFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9wcmVCdWlsZE5vdGlmaWNhdGlvbjtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhbmQgYXR0YWNoZXMgdG9hc3QgZGF0YSB0byBjb21wb25lbnRcclxuICAgICAqIHJldHVybnMgdGhlIGFjdGl2ZSB0b2FzdCwgb3IgaW4gY2FzZSBwcmV2ZW50RHVwbGljYXRlcyBpcyBlbmFibGVkIHRoZSBvcmlnaW5hbC9ub24tZHVwbGljYXRlIGFjdGl2ZSB0b2FzdC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfYnVpbGROb3RpZmljYXRpb247XHJcbn1cclxuIl19