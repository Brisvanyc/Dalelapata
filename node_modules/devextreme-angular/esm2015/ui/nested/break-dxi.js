/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiVizScaleBreak } from './base/viz-scale-break-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxiBreakComponent = class DxiBreakComponent extends DxiVizScaleBreak {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'breaks';
    }
};
DxiBreakComponent.ɵfac = function DxiBreakComponent_Factory(t) { return new (t || DxiBreakComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiBreakComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiBreakComponent, selectors: [["dxi-break"]], inputs: { endValue: "endValue", startValue: "startValue" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiBreakComponent_Template(rf, ctx) { }, styles: [""] });
DxiBreakComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
DxiBreakComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxiBreakComponent);
export { DxiBreakComponent };
let DxiBreakModule = class DxiBreakModule {
};
DxiBreakModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiBreakModule });
DxiBreakModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiBreakModule_Factory(t) { return new (t || DxiBreakModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiBreakComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-break',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'endValue',
                    'startValue'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiBreakModule, { declarations: [DxiBreakComponent], exports: [DxiBreakComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiBreakModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiBreakComponent
                ],
                exports: [
                    DxiBreakComponent
                ]
            }]
    }], null, null); })();
export { DxiBreakModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstZHhpLmpzIiwic291cmNlcyI6WyJuZzovZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZC9icmVhay1keGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7O0FBRUgsb0NBQW9DO0FBRXBDLGlEQUFpRDtBQUVqRCxPQUFPLEVBQ0gsU0FBUyxFQUNULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFDSCxnQkFBZ0IsR0FDbkIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBYTlELElBQWEsaUJBQWlCLEdBQTlCLE1BQWEsaUJBQWtCLFNBQVEsZ0JBQWdCO0lBT25ELFlBQWdDLGdCQUFrQyxFQUNsRCxVQUE0QjtRQUN4QyxLQUFLLEVBQUUsQ0FBQztRQUNSLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFWRCxJQUFjLFdBQVc7UUFDckIsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztDQVdKOztrV0FBQTs7WUFScUQsZ0JBQWdCLHVCQUFyRCxRQUFRLFlBQUksSUFBSTtZQUNELGdCQUFnQix1QkFBbkMsSUFBSTs7QUFSSixpQkFBaUIsdUJBQXVCLEtBVnBELFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRSxXQUFXLFVBQ3JCLHhEQVFBLENBT2EsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxJQUFJLEVBQUUsQ0FBQTtHQWZ2QixFQUFFLEVBQUUsVUFFWixTQUFTLEVBQUUsQ0FBQyx6QkFjSCxtQkFBQSxJQUFJLEVBQUUsQ0FBQTthQWRhLENBQUMsVUFDN0IsTUFBTSxFQUFFLGNBQ0osVUFBVSxYQVdvQyxnQkFBZ0I7T0FWOUQsWUFBWSxYQVdZLGdCQUFnQjtFQVYzQyxtQkFMUSxsQkFPQSxpQkFBaUIsQ0FlN0I7QUF0QmMsT0FNZCxDQUFDLENBQ1csaUJBQWlCO0FBeUI5QixJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0NBQUk7O0VBQUEsQ0FBbEIsY0FBYyw0QkFSMUIsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLGNBQ1osaUJBQWlCLFVBQ2xCLFVBQ0Q7QUFBTyxFQUFFLGNBQ1AsaUJBQWlCLFVBQ2xCLE9BQ0YsQ0FBQyxJQUNXLGNBQWMsQ0FBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQUMvQjtTQURhLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMjAuMS4zXG4gKiBCdWlsZCBkYXRlOiBGcmkgQXByIDI0IDIwMjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp1c2UtaW5wdXQtcHJvcGVydHktZGVjb3JhdG9yICovXHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgTmdNb2R1bGUsXHJcbiAgICBIb3N0LFxyXG4gICAgU2tpcFNlbGZcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcblxyXG5cclxuXHJcblxyXG5pbXBvcnQge1xyXG4gICAgTmVzdGVkT3B0aW9uSG9zdCxcclxufSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IER4aVZpelNjYWxlQnJlYWsgfSBmcm9tICcuL2Jhc2Uvdml6LXNjYWxlLWJyZWFrLWR4aSc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2R4aS1icmVhaycsXHJcbiAgICB0ZW1wbGF0ZTogJycsXHJcbiAgICBzdHlsZXM6IFsnJ10sXHJcbiAgICBwcm92aWRlcnM6IFtOZXN0ZWRPcHRpb25Ib3N0XSxcclxuICAgIGlucHV0czogW1xyXG4gICAgICAgICdlbmRWYWx1ZScsXHJcbiAgICAgICAgJ3N0YXJ0VmFsdWUnXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeGlCcmVha0NvbXBvbmVudCBleHRlbmRzIER4aVZpelNjYWxlQnJlYWsge1xyXG5cclxuICAgIHByb3RlY3RlZCBnZXQgX29wdGlvblBhdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuICdicmVha3MnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAU2tpcFNlbGYoKSBASG9zdCgpIHBhcmVudE9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsXHJcbiAgICAgICAgICAgIEBIb3N0KCkgb3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KHRoaXMsIHRoaXMuX2Z1bGxPcHRpb25QYXRoLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBEeGlCcmVha0NvbXBvbmVudFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgRHhpQnJlYWtDb21wb25lbnRcclxuICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHhpQnJlYWtNb2R1bGUgeyB9XHJcbiJdfQ==