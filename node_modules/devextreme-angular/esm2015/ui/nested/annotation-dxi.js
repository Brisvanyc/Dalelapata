/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiChartAnnotationConfig } from './base/chart-annotation-config-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
let DxiAnnotationComponent = class DxiAnnotationComponent extends DxiChartAnnotationConfig {
    constructor(parentOptionHost, optionHost) {
        super();
        parentOptionHost.setNestedOption(this);
        optionHost.setHost(this, this._fullOptionPath.bind(this));
    }
    get _optionPath() {
        return 'annotations';
    }
};
DxiAnnotationComponent.ɵfac = function DxiAnnotationComponent_Factory(t) { return new (t || DxiAnnotationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiAnnotationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiAnnotationComponent, selectors: [["dxi-annotation"]], inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", name: "name", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y", angle: "angle", radius: "radius" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiAnnotationComponent_Template(rf, ctx) { }, styles: [""] });
DxiAnnotationComponent.ctorParameters = () => [
    { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
    { type: NestedOptionHost, decorators: [{ type: Host }] }
];
DxiAnnotationComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
    tslib_1.__param(1, Host()),
    tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
        NestedOptionHost])
], DxiAnnotationComponent);
export { DxiAnnotationComponent };
let DxiAnnotationModule = class DxiAnnotationModule {
};
DxiAnnotationModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiAnnotationModule });
DxiAnnotationModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiAnnotationModule_Factory(t) { return new (t || DxiAnnotationModule)(); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiAnnotationComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-annotation',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'allowDragging',
                    'argument',
                    'arrowLength',
                    'arrowWidth',
                    'axis',
                    'border',
                    'color',
                    'customizeTooltip',
                    'data',
                    'description',
                    'font',
                    'height',
                    'image',
                    'name',
                    'offsetX',
                    'offsetY',
                    'opacity',
                    'paddingLeftRight',
                    'paddingTopBottom',
                    'series',
                    'shadow',
                    'template',
                    'text',
                    'textOverflow',
                    'tooltipEnabled',
                    'tooltipTemplate',
                    'type',
                    'value',
                    'width',
                    'wordWrap',
                    'x',
                    'y',
                    'angle',
                    'radius'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiAnnotationModule, { declarations: [DxiAnnotationComponent], exports: [DxiAnnotationComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiAnnotationModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiAnnotationComponent
                ],
                exports: [
                    DxiAnnotationComponent
                ]
            }]
    }], null, null); })();
export { DxiAnnotationModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbi1keGkuanMiLCJzb3VyY2VzIjpbIm5nOi9kZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkL2Fubm90YXRpb24tZHhpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQUVILG9DQUFvQztBQUVwQyxpREFBaUQ7QUFFakQsT0FBTyxFQUNILFNBQVMsRUFDVCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFFBQVEsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQU12QixPQUFPLEVBQ0gsZ0JBQWdCLEdBQ25CLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7OztBQTZDOUUsSUFBYSxzQkFBc0IsR0FBbkMsTUFBYSxzQkFBdUIsU0FBUSx3QkFBd0I7SUFPaEUsWUFBZ0MsZ0JBQWtDLEVBQ2xELFVBQTRCO1FBQ3hDLEtBQUssRUFBRSxDQUFDO1FBQ1IsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQVZELElBQWMsV0FBVztRQUNyQixPQUFPLGFBQWEsQ0FBQztJQUN6QixDQUFDO0NBV0o7OzBoQ0FBQTs7WUFScUQsZ0JBQWdCLHVCQUFyRCxRQUFRLFlBQUksSUFBSTtZQUNELGdCQUFnQix1QkFBbkMsSUFBSTs7QUFSSixzQkFBc0IsdUJBQXVCLEtBMUN6RCxTQUFTLENBQUMsVUFDUCxRQUFRLEVBQUUsZ0JBQWdCLG5EQXlDMUIsQ0FPYSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLElBQUksRUFBRSxDQUFBO0FBL0MvQixRQUFRLEVBQUUsRUFBRSxVQUVaLFNBQVMsM0JBOENBLG1CQUFBLElBQUksRUFBRSxDQUFBO0NBOUNKLENBQUMsZ0JBQWdCLENBQUMsVUFDN0IsTUFBTSxFQUFFLGNBQ0osTkEyQzhDLGdCQUFnQjtHQTNDL0MsY0FDZixUQTJDd0IsZ0JBQWdCO0FBM0M5QixjQUNWLGFBQWEseEJBa0NSLHNCQUFzQixDQWVsQzthQWhETyxZQUFZLGhCQWlDUCxzQkFBc0I7SUFoQzNCLE1BQU0sY0FDTixRQUFRLGNBQ1IsT0FBTyxyREF1RGYsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7Q0FBSTtVQXRENUIsa0JBQWtCLGNBQ2xCLE1BQU0sY0FDTixhQUFhO01BQ2IsTUFBTSxjQUNOLFFBQVEsY0FDUixPQUFPLGNBQ1AsTUFBTSxjQUNOLFNBQVMsY0FDVCxTQUFTLGNBQ1QsU0FBUyw5SUE2Q21CLENBQXZCLG1CQUFtQiw0QkFSL0IsUUFBUSxDQUFDLFVBQ1IsWUFBWSxFQUFFLGNBQ1osc0JBQXNCLFVBQ3ZCLFVBQ0QsT0FBTyxFQUFFO09BeENILGtCQUFrQixjQUNsQixrQkFBa0IsY0FDbEIsUUFBUSxwRUF1Q1osc0JBQXNCLFVBQ3ZCLE9BQ0YsQ0FBQyxJQUNXLG1CQUFtQixDQUFJO1lBekM1QixRQUFRO1NBQ1I7RUFBVSxjQUNWLE1BQU0sY0FDTjtNQUFjLGNBQ2Q7TUFBZ0IsY0FDaEIsaUJBQWlCO0lBQ2pCLE1BQU0sY0FDTjtLQUFPLGNBQ1AsT0FBTztHQUNQLFVBQVUsY0FDVixHQUFHO1lBQ0gsR0FBRyxjQUNIO0NBQU8sY0FDUCxRQUFRLFVBQ1g7a0JBckNRLEVBQUUsT0FzQ2Q7QUFBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBMkJGO1NBRGEsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBkZXZleHRyZW1lLWFuZ3VsYXJcbiAqIFZlcnNpb246IDIwLjEuM1xuICogQnVpbGQgZGF0ZTogRnJpIEFwciAyNCAyMDIwXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcbiAqXG4gKiBUaGlzIHNvZnR3YXJlIG1heSBiZSBtb2RpZmllZCBhbmQgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9EZXZFeHByZXNzL2RldmV4dHJlbWUtYW5ndWxhclxuICovXG5cbi8qIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aCAqL1xyXG5cclxuLyogdHNsaW50OmRpc2FibGU6dXNlLWlucHV0LXByb3BlcnR5LWRlY29yYXRvciAqL1xyXG5cclxuaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCxcclxuICAgIE5nTW9kdWxlLFxyXG4gICAgSG9zdCxcclxuICAgIFNraXBTZWxmXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuaW1wb3J0IHtcclxuICAgIE5lc3RlZE9wdGlvbkhvc3QsXHJcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeGlDaGFydEFubm90YXRpb25Db25maWcgfSBmcm9tICcuL2Jhc2UvY2hhcnQtYW5ub3RhdGlvbi1jb25maWctZHhpJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZHhpLWFubm90YXRpb24nLFxyXG4gICAgdGVtcGxhdGU6ICcnLFxyXG4gICAgc3R5bGVzOiBbJyddLFxyXG4gICAgcHJvdmlkZXJzOiBbTmVzdGVkT3B0aW9uSG9zdF0sXHJcbiAgICBpbnB1dHM6IFtcclxuICAgICAgICAnYWxsb3dEcmFnZ2luZycsXHJcbiAgICAgICAgJ2FyZ3VtZW50JyxcclxuICAgICAgICAnYXJyb3dMZW5ndGgnLFxyXG4gICAgICAgICdhcnJvd1dpZHRoJyxcclxuICAgICAgICAnYXhpcycsXHJcbiAgICAgICAgJ2JvcmRlcicsXHJcbiAgICAgICAgJ2NvbG9yJyxcclxuICAgICAgICAnY3VzdG9taXplVG9vbHRpcCcsXHJcbiAgICAgICAgJ2RhdGEnLFxyXG4gICAgICAgICdkZXNjcmlwdGlvbicsXHJcbiAgICAgICAgJ2ZvbnQnLFxyXG4gICAgICAgICdoZWlnaHQnLFxyXG4gICAgICAgICdpbWFnZScsXHJcbiAgICAgICAgJ25hbWUnLFxyXG4gICAgICAgICdvZmZzZXRYJyxcclxuICAgICAgICAnb2Zmc2V0WScsXHJcbiAgICAgICAgJ29wYWNpdHknLFxyXG4gICAgICAgICdwYWRkaW5nTGVmdFJpZ2h0JyxcclxuICAgICAgICAncGFkZGluZ1RvcEJvdHRvbScsXHJcbiAgICAgICAgJ3NlcmllcycsXHJcbiAgICAgICAgJ3NoYWRvdycsXHJcbiAgICAgICAgJ3RlbXBsYXRlJyxcclxuICAgICAgICAndGV4dCcsXHJcbiAgICAgICAgJ3RleHRPdmVyZmxvdycsXHJcbiAgICAgICAgJ3Rvb2x0aXBFbmFibGVkJyxcclxuICAgICAgICAndG9vbHRpcFRlbXBsYXRlJyxcclxuICAgICAgICAndHlwZScsXHJcbiAgICAgICAgJ3ZhbHVlJyxcclxuICAgICAgICAnd2lkdGgnLFxyXG4gICAgICAgICd3b3JkV3JhcCcsXHJcbiAgICAgICAgJ3gnLFxyXG4gICAgICAgICd5JyxcclxuICAgICAgICAnYW5nbGUnLFxyXG4gICAgICAgICdyYWRpdXMnXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeGlBbm5vdGF0aW9uQ29tcG9uZW50IGV4dGVuZHMgRHhpQ2hhcnRBbm5vdGF0aW9uQ29uZmlnIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAnYW5ub3RhdGlvbnMnO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAU2tpcFNlbGYoKSBASG9zdCgpIHBhcmVudE9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsXHJcbiAgICAgICAgICAgIEBIb3N0KCkgb3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgcGFyZW50T3B0aW9uSG9zdC5zZXROZXN0ZWRPcHRpb24odGhpcyk7XHJcbiAgICAgICAgb3B0aW9uSG9zdC5zZXRIb3N0KHRoaXMsIHRoaXMuX2Z1bGxPcHRpb25QYXRoLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBEeGlBbm5vdGF0aW9uQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBEeGlBbm5vdGF0aW9uQ29tcG9uZW50XHJcbiAgXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIER4aUFubm90YXRpb25Nb2R1bGUgeyB9XHJcbiJdfQ==