/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, NgZone, QueryList, SimpleChanges, EventEmitter, OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { DxTemplateDirective } from './template';
import { IDxTemplateHost, DxTemplateHost } from './template-host';
import { EmitterHelper } from './events-strategy';
import { WatcherHelper } from './watcher-helper';
import { INestedOptionContainer, ICollectionNestedOption, ICollectionNestedOptionContainer } from './nested-option';
import * as ɵngcc0 from '@angular/core';
export declare const getServerStateKey: () => any;
export declare abstract class DxComponent implements OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit, INestedOptionContainer, ICollectionNestedOptionContainer, IDxTemplateHost {
    protected element: ElementRef;
    private watcherHelper;
    private transferState;
    private platformId;
    private _initialOptions;
    protected _optionsToUpdate: any;
    private _collectionContainerImpl;
    eventHelper: EmitterHelper;
    optionChangedHandlers: EventEmitter<any>;
    templates: DxTemplateDirective[];
    instance: any;
    isLinked: boolean;
    changedOptions: {};
    removedNestedComponents: any[];
    recreatedNestedComponents: any[];
    widgetUpdateLocked: boolean;
    private _initTemplates;
    private _initEvents;
    private _initOptions;
    private _initPlatform;
    protected _createEventEmitters(events: any): void;
    _shouldOptionChange(name: string, value: any): boolean;
    clearChangedOptions(): void;
    protected _getOption(name: string): any;
    lockWidgetUpdate(): void;
    unlockWidgetUpdate(): void;
    protected _setOption(name: string, value: any): void;
    protected abstract _createInstance(element: any, options: any): any;
    protected _createWidget(element: any): void;
    protected _destroyWidget(): void;
    constructor(element: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, watcherHelper: WatcherHelper, transferState: TransferState, platformId: any);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    applyOptions(): void;
    resetOptions(): void;
    isRecreated(name: string): boolean;
    setTemplate(template: DxTemplateDirective): void;
    setChildren<T extends ICollectionNestedOption>(propertyName: string, items: QueryList<T>): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponent>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponent, never, never, {}, {}, never>;
}
export declare abstract class DxComponentExtension extends DxComponent implements OnInit, AfterViewInit {
    createInstance(element: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponentExtension>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponentExtension, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkNBOzs7Ozs7O0FBS0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDIwLjEuM1xyXG4gKiBCdWlsZCBkYXRlOiBGcmkgQXByIDI0IDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCB7IEVsZW1lbnRSZWYsIE5nWm9uZSwgUXVlcnlMaXN0LCBTaW1wbGVDaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBEb0NoZWNrLCBBZnRlckNvbnRlbnRDaGVja2VkLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRyYW5zZmVyU3RhdGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgRHhUZW1wbGF0ZURpcmVjdGl2ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xyXG5pbXBvcnQgeyBJRHhUZW1wbGF0ZUhvc3QsIER4VGVtcGxhdGVIb3N0IH0gZnJvbSAnLi90ZW1wbGF0ZS1ob3N0JztcclxuaW1wb3J0IHsgRW1pdHRlckhlbHBlciB9IGZyb20gJy4vZXZlbnRzLXN0cmF0ZWd5JztcclxuaW1wb3J0IHsgV2F0Y2hlckhlbHBlciB9IGZyb20gJy4vd2F0Y2hlci1oZWxwZXInO1xyXG5pbXBvcnQgeyBJTmVzdGVkT3B0aW9uQ29udGFpbmVyLCBJQ29sbGVjdGlvbk5lc3RlZE9wdGlvbiwgSUNvbGxlY3Rpb25OZXN0ZWRPcHRpb25Db250YWluZXIgfSBmcm9tICcuL25lc3RlZC1vcHRpb24nO1xyXG5leHBvcnQgZGVjbGFyZSBjb25zdCBnZXRTZXJ2ZXJTdGF0ZUtleTogKCkgPT4gYW55O1xyXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBEeENvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25Jbml0LCBEb0NoZWNrLCBBZnRlckNvbnRlbnRDaGVja2VkLCBBZnRlclZpZXdJbml0LCBJTmVzdGVkT3B0aW9uQ29udGFpbmVyLCBJQ29sbGVjdGlvbk5lc3RlZE9wdGlvbkNvbnRhaW5lciwgSUR4VGVtcGxhdGVIb3N0IHtcclxuICAgIHByb3RlY3RlZCBlbGVtZW50OiBFbGVtZW50UmVmO1xyXG4gICAgcHJpdmF0ZSB3YXRjaGVySGVscGVyO1xyXG4gICAgcHJpdmF0ZSB0cmFuc2ZlclN0YXRlO1xyXG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xyXG4gICAgcHJpdmF0ZSBfaW5pdGlhbE9wdGlvbnM7XHJcbiAgICBwcm90ZWN0ZWQgX29wdGlvbnNUb1VwZGF0ZTogYW55O1xyXG4gICAgcHJpdmF0ZSBfY29sbGVjdGlvbkNvbnRhaW5lckltcGw7XHJcbiAgICBldmVudEhlbHBlcjogRW1pdHRlckhlbHBlcjtcclxuICAgIG9wdGlvbkNoYW5nZWRIYW5kbGVyczogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICB0ZW1wbGF0ZXM6IER4VGVtcGxhdGVEaXJlY3RpdmVbXTtcclxuICAgIGluc3RhbmNlOiBhbnk7XHJcbiAgICBpc0xpbmtlZDogYm9vbGVhbjtcclxuICAgIGNoYW5nZWRPcHRpb25zOiB7fTtcclxuICAgIHJlbW92ZWROZXN0ZWRDb21wb25lbnRzOiBhbnlbXTtcclxuICAgIHJlY3JlYXRlZE5lc3RlZENvbXBvbmVudHM6IGFueVtdO1xyXG4gICAgd2lkZ2V0VXBkYXRlTG9ja2VkOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfaW5pdFRlbXBsYXRlcztcclxuICAgIHByaXZhdGUgX2luaXRFdmVudHM7XHJcbiAgICBwcml2YXRlIF9pbml0T3B0aW9ucztcclxuICAgIHByaXZhdGUgX2luaXRQbGF0Zm9ybTtcclxuICAgIHByb3RlY3RlZCBfY3JlYXRlRXZlbnRFbWl0dGVycyhldmVudHM6IGFueSk6IHZvaWQ7XHJcbiAgICBfc2hvdWxkT3B0aW9uQ2hhbmdlKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IGJvb2xlYW47XHJcbiAgICBjbGVhckNoYW5nZWRPcHRpb25zKCk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgX2dldE9wdGlvbihuYW1lOiBzdHJpbmcpOiBhbnk7XHJcbiAgICBsb2NrV2lkZ2V0VXBkYXRlKCk6IHZvaWQ7XHJcbiAgICB1bmxvY2tXaWRnZXRVcGRhdGUoKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBfc2V0T3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgX2NyZWF0ZUluc3RhbmNlKGVsZW1lbnQ6IGFueSwgb3B0aW9uczogYW55KTogYW55O1xyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVXaWRnZXQoZWxlbWVudDogYW55KTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBfZGVzdHJveVdpZGdldCgpOiB2b2lkO1xyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUsIHRlbXBsYXRlSG9zdDogRHhUZW1wbGF0ZUhvc3QsIHdhdGNoZXJIZWxwZXI6IFdhdGNoZXJIZWxwZXIsIHRyYW5zZmVyU3RhdGU6IFRyYW5zZmVyU3RhdGUsIHBsYXRmb3JtSWQ6IGFueSk7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJDb250ZW50Q2hlY2tlZCgpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBhcHBseU9wdGlvbnMoKTogdm9pZDtcclxuICAgIHJlc2V0T3B0aW9ucygpOiB2b2lkO1xyXG4gICAgaXNSZWNyZWF0ZWQobmFtZTogc3RyaW5nKTogYm9vbGVhbjtcclxuICAgIHNldFRlbXBsYXRlKHRlbXBsYXRlOiBEeFRlbXBsYXRlRGlyZWN0aXZlKTogdm9pZDtcclxuICAgIHNldENoaWxkcmVuPFQgZXh0ZW5kcyBJQ29sbGVjdGlvbk5lc3RlZE9wdGlvbj4ocHJvcGVydHlOYW1lOiBzdHJpbmcsIGl0ZW1zOiBRdWVyeUxpc3Q8VD4pOiBhbnk7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgRHhDb21wb25lbnRFeHRlbnNpb24gZXh0ZW5kcyBEeENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBjcmVhdGVJbnN0YW5jZShlbGVtZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xyXG59XHJcbiJdfQ==