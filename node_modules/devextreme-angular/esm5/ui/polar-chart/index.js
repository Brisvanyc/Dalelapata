/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
import { BrowserTransferStateModule } from '@angular/platform-browser';
import { TransferState } from '@angular/platform-browser';
import { Component, NgModule, ElementRef, NgZone, PLATFORM_ID, Inject, Input, Output, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, ContentChildren, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxPolarChart from 'devextreme/viz/polar_chart';
import { DxComponent, DxTemplateHost, DxIntegrationModule, DxTemplateModule, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxoAdaptiveLayoutModule } from 'devextreme-angular/ui/nested';
import { DxoAnimationModule } from 'devextreme-angular/ui/nested';
import { DxiAnnotationModule } from 'devextreme-angular/ui/nested';
import { DxoBorderModule } from 'devextreme-angular/ui/nested';
import { DxoFontModule } from 'devextreme-angular/ui/nested';
import { DxoImageModule } from 'devextreme-angular/ui/nested';
import { DxoShadowModule } from 'devextreme-angular/ui/nested';
import { DxoArgumentAxisModule } from 'devextreme-angular/ui/nested';
import { DxiConstantLineModule } from 'devextreme-angular/ui/nested';
import { DxoLabelModule } from 'devextreme-angular/ui/nested';
import { DxoConstantLineStyleModule } from 'devextreme-angular/ui/nested';
import { DxoGridModule } from 'devextreme-angular/ui/nested';
import { DxoFormatModule } from 'devextreme-angular/ui/nested';
import { DxoMinorGridModule } from 'devextreme-angular/ui/nested';
import { DxoMinorTickModule } from 'devextreme-angular/ui/nested';
import { DxoMinorTickIntervalModule } from 'devextreme-angular/ui/nested';
import { DxiStripModule } from 'devextreme-angular/ui/nested';
import { DxoStripStyleModule } from 'devextreme-angular/ui/nested';
import { DxoTickModule } from 'devextreme-angular/ui/nested';
import { DxoTickIntervalModule } from 'devextreme-angular/ui/nested';
import { DxoCommonAnnotationSettingsModule } from 'devextreme-angular/ui/nested';
import { DxoCommonAxisSettingsModule } from 'devextreme-angular/ui/nested';
import { DxoCommonSeriesSettingsModule } from 'devextreme-angular/ui/nested';
import { DxoAreaModule } from 'devextreme-angular/ui/nested';
import { DxoHoverStyleModule } from 'devextreme-angular/ui/nested';
import { DxoHatchingModule } from 'devextreme-angular/ui/nested';
import { DxoConnectorModule } from 'devextreme-angular/ui/nested';
import { DxoPointModule } from 'devextreme-angular/ui/nested';
import { DxoSelectionStyleModule } from 'devextreme-angular/ui/nested';
import { DxoValueErrorBarModule } from 'devextreme-angular/ui/nested';
import { DxoBarModule } from 'devextreme-angular/ui/nested';
import { DxoArgumentFormatModule } from 'devextreme-angular/ui/nested';
import { DxoLineModule } from 'devextreme-angular/ui/nested';
import { DxoScatterModule } from 'devextreme-angular/ui/nested';
import { DxoStackedbarModule } from 'devextreme-angular/ui/nested';
import { DxoDataPrepareSettingsModule } from 'devextreme-angular/ui/nested';
import { DxoExportModule } from 'devextreme-angular/ui/nested';
import { DxoLegendModule } from 'devextreme-angular/ui/nested';
import { DxoMarginModule } from 'devextreme-angular/ui/nested';
import { DxoTitleModule } from 'devextreme-angular/ui/nested';
import { DxoSubtitleModule } from 'devextreme-angular/ui/nested';
import { DxoLoadingIndicatorModule } from 'devextreme-angular/ui/nested';
import { DxiSeriesModule } from 'devextreme-angular/ui/nested';
import { DxoSeriesTemplateModule } from 'devextreme-angular/ui/nested';
import { DxoSizeModule } from 'devextreme-angular/ui/nested';
import { DxoTooltipModule } from 'devextreme-angular/ui/nested';
import { DxoValueAxisModule } from 'devextreme-angular/ui/nested';
import { DxoMinVisualRangeLengthModule } from 'devextreme-angular/ui/nested';
import { DxiAnnotationComponent } from 'devextreme-angular/ui/nested';
import { DxiSeriesComponent } from 'devextreme-angular/ui/nested';
/**
 * The PolarChart is a widget that visualizes data in a polar coordinate system.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
var DxPolarChartComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxPolarChartComponent, _super);
    function DxPolarChartComponent(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        var _this = _super.call(this, elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId) || this;
        _this._watcherHelper = _watcherHelper;
        _this._idh = _idh;
        _this._createEventEmitters([
            { subscribe: 'argumentAxisClick', emit: 'onArgumentAxisClick' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'done', emit: 'onDone' },
            { subscribe: 'drawn', emit: 'onDrawn' },
            { subscribe: 'exported', emit: 'onExported' },
            { subscribe: 'exporting', emit: 'onExporting' },
            { subscribe: 'fileSaving', emit: 'onFileSaving' },
            { subscribe: 'incidentOccurred', emit: 'onIncidentOccurred' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'legendClick', emit: 'onLegendClick' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'pointClick', emit: 'onPointClick' },
            { subscribe: 'pointHoverChanged', emit: 'onPointHoverChanged' },
            { subscribe: 'pointSelectionChanged', emit: 'onPointSelectionChanged' },
            { subscribe: 'seriesClick', emit: 'onSeriesClick' },
            { subscribe: 'seriesHoverChanged', emit: 'onSeriesHoverChanged' },
            { subscribe: 'seriesSelectionChanged', emit: 'onSeriesSelectionChanged' },
            { subscribe: 'tooltipHidden', emit: 'onTooltipHidden' },
            { subscribe: 'tooltipShown', emit: 'onTooltipShown' },
            { subscribe: 'zoomEnd', emit: 'onZoomEnd' },
            { subscribe: 'zoomStart', emit: 'onZoomStart' },
            { emit: 'adaptiveLayoutChange' },
            { emit: 'animationChange' },
            { emit: 'annotationsChange' },
            { emit: 'argumentAxisChange' },
            { emit: 'barGroupPaddingChange' },
            { emit: 'barGroupWidthChange' },
            { emit: 'barWidthChange' },
            { emit: 'commonAnnotationSettingsChange' },
            { emit: 'commonAxisSettingsChange' },
            { emit: 'commonSeriesSettingsChange' },
            { emit: 'containerBackgroundColorChange' },
            { emit: 'customizeAnnotationChange' },
            { emit: 'customizeLabelChange' },
            { emit: 'customizePointChange' },
            { emit: 'dataPrepareSettingsChange' },
            { emit: 'dataSourceChange' },
            { emit: 'disabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'equalBarWidthChange' },
            { emit: 'exportChange' },
            { emit: 'legendChange' },
            { emit: 'loadingIndicatorChange' },
            { emit: 'marginChange' },
            { emit: 'negativesAsZeroesChange' },
            { emit: 'paletteChange' },
            { emit: 'paletteExtensionModeChange' },
            { emit: 'pathModifiedChange' },
            { emit: 'pointSelectionModeChange' },
            { emit: 'redrawOnResizeChange' },
            { emit: 'resolveLabelOverlappingChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'seriesChange' },
            { emit: 'seriesSelectionModeChange' },
            { emit: 'seriesTemplateChange' },
            { emit: 'sizeChange' },
            { emit: 'themeChange' },
            { emit: 'titleChange' },
            { emit: 'tooltipChange' },
            { emit: 'useSpiderWebChange' },
            { emit: 'valueAxisChange' }
        ]);
        _this._idh.setHost(_this);
        optionHost.setHost(_this);
        return _this;
    }
    Object.defineProperty(DxPolarChartComponent.prototype, "adaptiveLayout", {
        /**
         * Specifies adaptive layout options.
         */
        get: function () {
            return this._getOption('adaptiveLayout');
        },
        set: function (value) {
            this._setOption('adaptiveLayout', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "animation", {
        /**
         * Specifies animation options.
         */
        get: function () {
            return this._getOption('animation');
        },
        set: function (value) {
            this._setOption('animation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "annotations", {
        /**
         * Specifies the annotation collection.
         */
        get: function () {
            return this._getOption('annotations');
        },
        set: function (value) {
            this._setOption('annotations', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "argumentAxis", {
        /**
         * Specifies argument axis options for the PolarChart widget.
         */
        get: function () {
            return this._getOption('argumentAxis');
        },
        set: function (value) {
            this._setOption('argumentAxis', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "barGroupPadding", {
        /**
         * Controls the padding and consequently the angular width of a group of bars with the same argument using relative units. Ignored if the barGroupWidth option is set.
         */
        get: function () {
            return this._getOption('barGroupPadding');
        },
        set: function (value) {
            this._setOption('barGroupPadding', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "barGroupWidth", {
        /**
         * Specifies a fixed angular width for groups of bars with the same argument, measured in degrees. Takes precedence over the barGroupPadding option.
         */
        get: function () {
            return this._getOption('barGroupWidth');
        },
        set: function (value) {
            this._setOption('barGroupWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "barWidth", {
        /**
         * Use CommonPolarChartSeries.barPadding instead.
         */
        get: function () {
            return this._getOption('barWidth');
        },
        set: function (value) {
            this._setOption('barWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "commonAnnotationSettings", {
        /**
         * Specifies settings common for all annotations in the PolarChart.
         */
        get: function () {
            return this._getOption('commonAnnotationSettings');
        },
        set: function (value) {
            this._setOption('commonAnnotationSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "commonAxisSettings", {
        /**
         * An object defining the configuration options that are common for all axes of the PolarChart widget.
         */
        get: function () {
            return this._getOption('commonAxisSettings');
        },
        set: function (value) {
            this._setOption('commonAxisSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "commonSeriesSettings", {
        /**
         * An object defining the configuration options that are common for all series of the PolarChart widget.
         */
        get: function () {
            return this._getOption('commonSeriesSettings');
        },
        set: function (value) {
            this._setOption('commonSeriesSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "containerBackgroundColor", {
        /**
         * Specifies the color of the parent page element.
         */
        get: function () {
            return this._getOption('containerBackgroundColor');
        },
        set: function (value) {
            this._setOption('containerBackgroundColor', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "customizeAnnotation", {
        /**
         * Customizes an individual annotation.
         */
        get: function () {
            return this._getOption('customizeAnnotation');
        },
        set: function (value) {
            this._setOption('customizeAnnotation', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "customizeLabel", {
        /**
         * Customizes the appearance of an individual point label.
         */
        get: function () {
            return this._getOption('customizeLabel');
        },
        set: function (value) {
            this._setOption('customizeLabel', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "customizePoint", {
        /**
         * Customizes the appearance of an individual series point.
         */
        get: function () {
            return this._getOption('customizePoint');
        },
        set: function (value) {
            this._setOption('customizePoint', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "dataPrepareSettings", {
        /**
         * An object providing options for managing data from a data source.
         */
        get: function () {
            return this._getOption('dataPrepareSettings');
        },
        set: function (value) {
            this._setOption('dataPrepareSettings', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "dataSource", {
        /**
         * Binds the widget to data.
         */
        get: function () {
            return this._getOption('dataSource');
        },
        set: function (value) {
            this._setOption('dataSource', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "disabled", {
        /**
         * Specifies whether the widget responds to user interaction.
         */
        get: function () {
            return this._getOption('disabled');
        },
        set: function (value) {
            this._setOption('disabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "elementAttr", {
        /**
         * Specifies the attributes to be attached to the widget's root element.
         */
        get: function () {
            return this._getOption('elementAttr');
        },
        set: function (value) {
            this._setOption('elementAttr', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "equalBarWidth", {
        /**
         * Use CommonPolarChartSeries.ignoreEmptyPoints instead.
         */
        get: function () {
            return this._getOption('equalBarWidth');
        },
        set: function (value) {
            this._setOption('equalBarWidth', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "export", {
        /**
         * Configures the exporting and printing features.
         */
        get: function () {
            return this._getOption('export');
        },
        set: function (value) {
            this._setOption('export', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "legend", {
        /**
         * Specifies the options of a chart's legend.
         */
        get: function () {
            return this._getOption('legend');
        },
        set: function (value) {
            this._setOption('legend', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "loadingIndicator", {
        /**
         * Configures the loading indicator.
         */
        get: function () {
            return this._getOption('loadingIndicator');
        },
        set: function (value) {
            this._setOption('loadingIndicator', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "margin", {
        /**
         * Generates space around the widget.
         */
        get: function () {
            return this._getOption('margin');
        },
        set: function (value) {
            this._setOption('margin', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "negativesAsZeroes", {
        /**
         * Forces the widget to treat negative values as zeroes. Applies to stacked-like series only.
         */
        get: function () {
            return this._getOption('negativesAsZeroes');
        },
        set: function (value) {
            this._setOption('negativesAsZeroes', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "palette", {
        /**
         * Sets the palette to be used for colorizing series and their elements.
         */
        get: function () {
            return this._getOption('palette');
        },
        set: function (value) {
            this._setOption('palette', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "paletteExtensionMode", {
        /**
         * Specifies what to do with colors in the palette when their number is less than the number of series (in the Chart widget) or points in a series (in the PieChart widget).
         */
        get: function () {
            return this._getOption('paletteExtensionMode');
        },
        set: function (value) {
            this._setOption('paletteExtensionMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "pathModified", {
        /**
         * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.
         */
        get: function () {
            return this._getOption('pathModified');
        },
        set: function (value) {
            this._setOption('pathModified', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "pointSelectionMode", {
        /**
         * Specifies whether a single point or multiple points can be selected in the chart.
         */
        get: function () {
            return this._getOption('pointSelectionMode');
        },
        set: function (value) {
            this._setOption('pointSelectionMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "redrawOnResize", {
        /**
         * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.
         */
        get: function () {
            return this._getOption('redrawOnResize');
        },
        set: function (value) {
            this._setOption('redrawOnResize', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "resolveLabelOverlapping", {
        /**
         * Specifies how the chart must behave when series point labels overlap.
         */
        get: function () {
            return this._getOption('resolveLabelOverlapping');
        },
        set: function (value) {
            this._setOption('resolveLabelOverlapping', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "rtlEnabled", {
        /**
         * Switches the widget to a right-to-left representation.
         */
        get: function () {
            return this._getOption('rtlEnabled');
        },
        set: function (value) {
            this._setOption('rtlEnabled', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "series", {
        /**
         * Specifies options for PolarChart widget series.
         */
        get: function () {
            return this._getOption('series');
        },
        set: function (value) {
            this._setOption('series', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "seriesSelectionMode", {
        /**
         * Specifies whether a single series or multiple series can be selected in the chart.
         */
        get: function () {
            return this._getOption('seriesSelectionMode');
        },
        set: function (value) {
            this._setOption('seriesSelectionMode', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "seriesTemplate", {
        /**
         * Defines options for the series template.
         */
        get: function () {
            return this._getOption('seriesTemplate');
        },
        set: function (value) {
            this._setOption('seriesTemplate', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "size", {
        /**
         * Specifies the widget's size in pixels.
         */
        get: function () {
            return this._getOption('size');
        },
        set: function (value) {
            this._setOption('size', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "theme", {
        /**
         * Sets the name of the theme the widget uses.
         */
        get: function () {
            return this._getOption('theme');
        },
        set: function (value) {
            this._setOption('theme', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "title", {
        /**
         * Configures the widget's title.
         */
        get: function () {
            return this._getOption('title');
        },
        set: function (value) {
            this._setOption('title', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "tooltip", {
        /**
         * Configures tooltips.
         */
        get: function () {
            return this._getOption('tooltip');
        },
        set: function (value) {
            this._setOption('tooltip', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "useSpiderWeb", {
        /**
         * Indicates whether or not to display a "spider web".
         */
        get: function () {
            return this._getOption('useSpiderWeb');
        },
        set: function (value) {
            this._setOption('useSpiderWeb', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "valueAxis", {
        /**
         * Specifies value axis options for the PolarChart widget.
         */
        get: function () {
            return this._getOption('valueAxis');
        },
        set: function (value) {
            this._setOption('valueAxis', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "annotationsChildren", {
        get: function () {
            return this._getOption('annotations');
        },
        set: function (value) {
            this.setChildren('annotations', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxPolarChartComponent.prototype, "seriesChildren", {
        get: function () {
            return this._getOption('series');
        },
        set: function (value) {
            this.setChildren('series', value);
        },
        enumerable: true,
        configurable: true
    });
    DxPolarChartComponent.prototype._createInstance = function (element, options) {
        return new DxPolarChart(element, options);
    };
    DxPolarChartComponent.prototype.ngOnDestroy = function () {
        this._destroyWidget();
    };
    DxPolarChartComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        this.setupChanges('annotations', changes);
        this.setupChanges('dataSource', changes);
        this.setupChanges('palette', changes);
        this.setupChanges('series', changes);
    };
    DxPolarChartComponent.prototype.setupChanges = function (prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    };
    DxPolarChartComponent.prototype.ngDoCheck = function () {
        this._idh.doCheck('annotations');
        this._idh.doCheck('dataSource');
        this._idh.doCheck('palette');
        this._idh.doCheck('series');
        this._watcherHelper.checkWatchers();
        _super.prototype.ngDoCheck.call(this);
        _super.prototype.clearChangedOptions.call(this);
    };
    DxPolarChartComponent.prototype._setOption = function (name, value) {
        var isSetup = this._idh.setupSingle(name, value);
        var isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            _super.prototype._setOption.call(this, name, value);
        }
    };
    DxPolarChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NgZone },
        { type: DxTemplateHost },
        { type: WatcherHelper },
        { type: IterableDifferHelper },
        { type: NestedOptionHost },
        { type: TransferState },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "adaptiveLayout", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "animation", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], DxPolarChartComponent.prototype, "annotations", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "argumentAxis", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], DxPolarChartComponent.prototype, "barGroupPadding", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], DxPolarChartComponent.prototype, "barGroupWidth", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Number),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], DxPolarChartComponent.prototype, "barWidth", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "commonAnnotationSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "commonAxisSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "commonSeriesSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxPolarChartComponent.prototype, "containerBackgroundColor", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], DxPolarChartComponent.prototype, "customizeAnnotation", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], DxPolarChartComponent.prototype, "customizeLabel", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Function])
    ], DxPolarChartComponent.prototype, "customizePoint", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "dataPrepareSettings", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "dataSource", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxPolarChartComponent.prototype, "disabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "elementAttr", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxPolarChartComponent.prototype, "equalBarWidth", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "export", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "legend", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "loadingIndicator", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "margin", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxPolarChartComponent.prototype, "negativesAsZeroes", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "palette", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxPolarChartComponent.prototype, "paletteExtensionMode", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxPolarChartComponent.prototype, "pathModified", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxPolarChartComponent.prototype, "pointSelectionMode", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxPolarChartComponent.prototype, "redrawOnResize", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxPolarChartComponent.prototype, "resolveLabelOverlapping", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxPolarChartComponent.prototype, "rtlEnabled", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "series", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxPolarChartComponent.prototype, "seriesSelectionMode", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "seriesTemplate", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "size", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], DxPolarChartComponent.prototype, "theme", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "title", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "tooltip", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [Boolean])
    ], DxPolarChartComponent.prototype, "useSpiderWeb", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "valueAxis", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onArgumentAxisClick", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onDisposing", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onDone", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onDrawn", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onExported", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onExporting", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onFileSaving", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onIncidentOccurred", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onInitialized", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onLegendClick", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onOptionChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onPointClick", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onPointHoverChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onPointSelectionChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onSeriesClick", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onSeriesHoverChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onSeriesSelectionChanged", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onTooltipHidden", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onTooltipShown", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onZoomEnd", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "onZoomStart", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "adaptiveLayoutChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "animationChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "annotationsChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "argumentAxisChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "barGroupPaddingChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "barGroupWidthChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "barWidthChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "commonAnnotationSettingsChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "commonAxisSettingsChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "commonSeriesSettingsChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "containerBackgroundColorChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "customizeAnnotationChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "customizeLabelChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "customizePointChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "dataPrepareSettingsChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "dataSourceChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "disabledChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "elementAttrChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "equalBarWidthChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "exportChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "legendChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "loadingIndicatorChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "marginChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "negativesAsZeroesChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "paletteChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "paletteExtensionModeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "pathModifiedChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "pointSelectionModeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "redrawOnResizeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "resolveLabelOverlappingChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "rtlEnabledChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "seriesChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "seriesSelectionModeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "seriesTemplateChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "sizeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "themeChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "titleChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "tooltipChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "useSpiderWebChange", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], DxPolarChartComponent.prototype, "valueAxisChange", void 0);
    tslib_1.__decorate([
        ContentChildren(DxiAnnotationComponent),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "annotationsChildren", null);
    tslib_1.__decorate([
        ContentChildren(DxiSeriesComponent),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxPolarChartComponent.prototype, "seriesChildren", null);
    DxPolarChartComponent = tslib_1.__decorate([ tslib_1.__param(7, Inject(PLATFORM_ID)),
        tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
            WatcherHelper,
            IterableDifferHelper,
            NestedOptionHost,
            TransferState, Object])
    ], DxPolarChartComponent);
DxPolarChartComponent.ɵfac = function DxPolarChartComponent_Factory(t) { return new (t || DxPolarChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxPolarChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxPolarChartComponent, selectors: [["dx-polar-chart"]], contentQueries: function DxPolarChartComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiAnnotationComponent, false);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiSeriesComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.annotationsChildren = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.seriesChildren = _t);
    } }, inputs: { adaptiveLayout: "adaptiveLayout", animation: "animation", annotations: "annotations", argumentAxis: "argumentAxis", barGroupPadding: "barGroupPadding", barGroupWidth: "barGroupWidth", barWidth: "barWidth", commonAnnotationSettings: "commonAnnotationSettings", commonAxisSettings: "commonAxisSettings", commonSeriesSettings: "commonSeriesSettings", containerBackgroundColor: "containerBackgroundColor", customizeAnnotation: "customizeAnnotation", customizeLabel: "customizeLabel", customizePoint: "customizePoint", dataPrepareSettings: "dataPrepareSettings", dataSource: "dataSource", disabled: "disabled", elementAttr: "elementAttr", equalBarWidth: "equalBarWidth", export: "export", legend: "legend", loadingIndicator: "loadingIndicator", margin: "margin", negativesAsZeroes: "negativesAsZeroes", palette: "palette", paletteExtensionMode: "paletteExtensionMode", pathModified: "pathModified", pointSelectionMode: "pointSelectionMode", redrawOnResize: "redrawOnResize", resolveLabelOverlapping: "resolveLabelOverlapping", rtlEnabled: "rtlEnabled", series: "series", seriesSelectionMode: "seriesSelectionMode", seriesTemplate: "seriesTemplate", size: "size", theme: "theme", title: "title", tooltip: "tooltip", useSpiderWeb: "useSpiderWeb", valueAxis: "valueAxis" }, outputs: { onArgumentAxisClick: "onArgumentAxisClick", onDisposing: "onDisposing", onDone: "onDone", onDrawn: "onDrawn", onExported: "onExported", onExporting: "onExporting", onFileSaving: "onFileSaving", onIncidentOccurred: "onIncidentOccurred", onInitialized: "onInitialized", onLegendClick: "onLegendClick", onOptionChanged: "onOptionChanged", onPointClick: "onPointClick", onPointHoverChanged: "onPointHoverChanged", onPointSelectionChanged: "onPointSelectionChanged", onSeriesClick: "onSeriesClick", onSeriesHoverChanged: "onSeriesHoverChanged", onSeriesSelectionChanged: "onSeriesSelectionChanged", onTooltipHidden: "onTooltipHidden", onTooltipShown: "onTooltipShown", onZoomEnd: "onZoomEnd", onZoomStart: "onZoomStart", adaptiveLayoutChange: "adaptiveLayoutChange", animationChange: "animationChange", annotationsChange: "annotationsChange", argumentAxisChange: "argumentAxisChange", barGroupPaddingChange: "barGroupPaddingChange", barGroupWidthChange: "barGroupWidthChange", barWidthChange: "barWidthChange", commonAnnotationSettingsChange: "commonAnnotationSettingsChange", commonAxisSettingsChange: "commonAxisSettingsChange", commonSeriesSettingsChange: "commonSeriesSettingsChange", containerBackgroundColorChange: "containerBackgroundColorChange", customizeAnnotationChange: "customizeAnnotationChange", customizeLabelChange: "customizeLabelChange", customizePointChange: "customizePointChange", dataPrepareSettingsChange: "dataPrepareSettingsChange", dataSourceChange: "dataSourceChange", disabledChange: "disabledChange", elementAttrChange: "elementAttrChange", equalBarWidthChange: "equalBarWidthChange", exportChange: "exportChange", legendChange: "legendChange", loadingIndicatorChange: "loadingIndicatorChange", marginChange: "marginChange", negativesAsZeroesChange: "negativesAsZeroesChange", paletteChange: "paletteChange", paletteExtensionModeChange: "paletteExtensionModeChange", pathModifiedChange: "pathModifiedChange", pointSelectionModeChange: "pointSelectionModeChange", redrawOnResizeChange: "redrawOnResizeChange", resolveLabelOverlappingChange: "resolveLabelOverlappingChange", rtlEnabledChange: "rtlEnabledChange", seriesChange: "seriesChange", seriesSelectionModeChange: "seriesSelectionModeChange", seriesTemplateChange: "seriesTemplateChange", sizeChange: "sizeChange", themeChange: "themeChange", titleChange: "titleChange", tooltipChange: "tooltipChange", useSpiderWebChange: "useSpiderWebChange", valueAxisChange: "valueAxisChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], decls: 0, vars: 0, template: function DxPolarChartComponent_Template(rf, ctx) { }, styles: ["[_nghost-%COMP%] {  display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxPolarChartComponent, [{
        type: Component,
        args: [{
                selector: 'dx-polar-chart',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ],
                styles: [' :host {  display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { adaptiveLayout: [{
            type: Input
        }], animation: [{
            type: Input
        }], annotations: [{
            type: Input
        }], argumentAxis: [{
            type: Input
        }], barGroupPadding: [{
            type: Input
        }], barGroupWidth: [{
            type: Input
        }], barWidth: [{
            type: Input
        }], commonAnnotationSettings: [{
            type: Input
        }], commonAxisSettings: [{
            type: Input
        }], commonSeriesSettings: [{
            type: Input
        }], containerBackgroundColor: [{
            type: Input
        }], customizeAnnotation: [{
            type: Input
        }], customizeLabel: [{
            type: Input
        }], customizePoint: [{
            type: Input
        }], dataPrepareSettings: [{
            type: Input
        }], dataSource: [{
            type: Input
        }], disabled: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], equalBarWidth: [{
            type: Input
        }], export: [{
            type: Input
        }], legend: [{
            type: Input
        }], loadingIndicator: [{
            type: Input
        }], margin: [{
            type: Input
        }], negativesAsZeroes: [{
            type: Input
        }], palette: [{
            type: Input
        }], paletteExtensionMode: [{
            type: Input
        }], pathModified: [{
            type: Input
        }], pointSelectionMode: [{
            type: Input
        }], redrawOnResize: [{
            type: Input
        }], resolveLabelOverlapping: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], series: [{
            type: Input
        }], seriesSelectionMode: [{
            type: Input
        }], seriesTemplate: [{
            type: Input
        }], size: [{
            type: Input
        }], theme: [{
            type: Input
        }], title: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], useSpiderWeb: [{
            type: Input
        }], valueAxis: [{
            type: Input
        }], annotationsChildren: [{
            type: ContentChildren,
            args: [DxiAnnotationComponent]
        }], seriesChildren: [{
            type: ContentChildren,
            args: [DxiSeriesComponent]
        }], onArgumentAxisClick: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onDone: [{
            type: Output
        }], onDrawn: [{
            type: Output
        }], onExported: [{
            type: Output
        }], onExporting: [{
            type: Output
        }], onFileSaving: [{
            type: Output
        }], onIncidentOccurred: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onLegendClick: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onPointClick: [{
            type: Output
        }], onPointHoverChanged: [{
            type: Output
        }], onPointSelectionChanged: [{
            type: Output
        }], onSeriesClick: [{
            type: Output
        }], onSeriesHoverChanged: [{
            type: Output
        }], onSeriesSelectionChanged: [{
            type: Output
        }], onTooltipHidden: [{
            type: Output
        }], onTooltipShown: [{
            type: Output
        }], onZoomEnd: [{
            type: Output
        }], onZoomStart: [{
            type: Output
        }], adaptiveLayoutChange: [{
            type: Output
        }], animationChange: [{
            type: Output
        }], annotationsChange: [{
            type: Output
        }], argumentAxisChange: [{
            type: Output
        }], barGroupPaddingChange: [{
            type: Output
        }], barGroupWidthChange: [{
            type: Output
        }], barWidthChange: [{
            type: Output
        }], commonAnnotationSettingsChange: [{
            type: Output
        }], commonAxisSettingsChange: [{
            type: Output
        }], commonSeriesSettingsChange: [{
            type: Output
        }], containerBackgroundColorChange: [{
            type: Output
        }], customizeAnnotationChange: [{
            type: Output
        }], customizeLabelChange: [{
            type: Output
        }], customizePointChange: [{
            type: Output
        }], dataPrepareSettingsChange: [{
            type: Output
        }], dataSourceChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], equalBarWidthChange: [{
            type: Output
        }], exportChange: [{
            type: Output
        }], legendChange: [{
            type: Output
        }], loadingIndicatorChange: [{
            type: Output
        }], marginChange: [{
            type: Output
        }], negativesAsZeroesChange: [{
            type: Output
        }], paletteChange: [{
            type: Output
        }], paletteExtensionModeChange: [{
            type: Output
        }], pathModifiedChange: [{
            type: Output
        }], pointSelectionModeChange: [{
            type: Output
        }], redrawOnResizeChange: [{
            type: Output
        }], resolveLabelOverlappingChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], seriesChange: [{
            type: Output
        }], seriesSelectionModeChange: [{
            type: Output
        }], seriesTemplateChange: [{
            type: Output
        }], sizeChange: [{
            type: Output
        }], themeChange: [{
            type: Output
        }], titleChange: [{
            type: Output
        }], tooltipChange: [{
            type: Output
        }], useSpiderWebChange: [{
            type: Output
        }], valueAxisChange: [{
            type: Output
        }] }); })();
    return DxPolarChartComponent;
}(DxComponent));
export { DxPolarChartComponent };
var DxPolarChartModule = /** @class */ (function () {
    function DxPolarChartModule() {
    }
DxPolarChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxPolarChartModule });
DxPolarChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxPolarChartModule_Factory(t) { return new (t || DxPolarChartModule)(); }, imports: [[
            DxoAdaptiveLayoutModule,
            DxoAnimationModule,
            DxiAnnotationModule,
            DxoBorderModule,
            DxoFontModule,
            DxoImageModule,
            DxoShadowModule,
            DxoArgumentAxisModule,
            DxiConstantLineModule,
            DxoLabelModule,
            DxoConstantLineStyleModule,
            DxoGridModule,
            DxoFormatModule,
            DxoMinorGridModule,
            DxoMinorTickModule,
            DxoMinorTickIntervalModule,
            DxiStripModule,
            DxoStripStyleModule,
            DxoTickModule,
            DxoTickIntervalModule,
            DxoCommonAnnotationSettingsModule,
            DxoCommonAxisSettingsModule,
            DxoCommonSeriesSettingsModule,
            DxoAreaModule,
            DxoHoverStyleModule,
            DxoHatchingModule,
            DxoConnectorModule,
            DxoPointModule,
            DxoSelectionStyleModule,
            DxoValueErrorBarModule,
            DxoBarModule,
            DxoArgumentFormatModule,
            DxoLineModule,
            DxoScatterModule,
            DxoStackedbarModule,
            DxoDataPrepareSettingsModule,
            DxoExportModule,
            DxoLegendModule,
            DxoMarginModule,
            DxoTitleModule,
            DxoSubtitleModule,
            DxoLoadingIndicatorModule,
            DxiSeriesModule,
            DxoSeriesTemplateModule,
            DxoSizeModule,
            DxoTooltipModule,
            DxoValueAxisModule,
            DxoMinVisualRangeLengthModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ],
        DxoAdaptiveLayoutModule,
        DxoAnimationModule,
        DxiAnnotationModule,
        DxoBorderModule,
        DxoFontModule,
        DxoImageModule,
        DxoShadowModule,
        DxoArgumentAxisModule,
        DxiConstantLineModule,
        DxoLabelModule,
        DxoConstantLineStyleModule,
        DxoGridModule,
        DxoFormatModule,
        DxoMinorGridModule,
        DxoMinorTickModule,
        DxoMinorTickIntervalModule,
        DxiStripModule,
        DxoStripStyleModule,
        DxoTickModule,
        DxoTickIntervalModule,
        DxoCommonAnnotationSettingsModule,
        DxoCommonAxisSettingsModule,
        DxoCommonSeriesSettingsModule,
        DxoAreaModule,
        DxoHoverStyleModule,
        DxoHatchingModule,
        DxoConnectorModule,
        DxoPointModule,
        DxoSelectionStyleModule,
        DxoValueErrorBarModule,
        DxoBarModule,
        DxoArgumentFormatModule,
        DxoLineModule,
        DxoScatterModule,
        DxoStackedbarModule,
        DxoDataPrepareSettingsModule,
        DxoExportModule,
        DxoLegendModule,
        DxoMarginModule,
        DxoTitleModule,
        DxoSubtitleModule,
        DxoLoadingIndicatorModule,
        DxiSeriesModule,
        DxoSeriesTemplateModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoValueAxisModule,
        DxoMinVisualRangeLengthModule,
        DxTemplateModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxPolarChartModule, { declarations: function () { return [DxPolarChartComponent]; }, imports: function () { return [DxoAdaptiveLayoutModule,
        DxoAnimationModule,
        DxiAnnotationModule,
        DxoBorderModule,
        DxoFontModule,
        DxoImageModule,
        DxoShadowModule,
        DxoArgumentAxisModule,
        DxiConstantLineModule,
        DxoLabelModule,
        DxoConstantLineStyleModule,
        DxoGridModule,
        DxoFormatModule,
        DxoMinorGridModule,
        DxoMinorTickModule,
        DxoMinorTickIntervalModule,
        DxiStripModule,
        DxoStripStyleModule,
        DxoTickModule,
        DxoTickIntervalModule,
        DxoCommonAnnotationSettingsModule,
        DxoCommonAxisSettingsModule,
        DxoCommonSeriesSettingsModule,
        DxoAreaModule,
        DxoHoverStyleModule,
        DxoHatchingModule,
        DxoConnectorModule,
        DxoPointModule,
        DxoSelectionStyleModule,
        DxoValueErrorBarModule,
        DxoBarModule,
        DxoArgumentFormatModule,
        DxoLineModule,
        DxoScatterModule,
        DxoStackedbarModule,
        DxoDataPrepareSettingsModule,
        DxoExportModule,
        DxoLegendModule,
        DxoMarginModule,
        DxoTitleModule,
        DxoSubtitleModule,
        DxoLoadingIndicatorModule,
        DxiSeriesModule,
        DxoSeriesTemplateModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoValueAxisModule,
        DxoMinVisualRangeLengthModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxPolarChartComponent,
        DxoAdaptiveLayoutModule,
        DxoAnimationModule,
        DxiAnnotationModule,
        DxoBorderModule,
        DxoFontModule,
        DxoImageModule,
        DxoShadowModule,
        DxoArgumentAxisModule,
        DxiConstantLineModule,
        DxoLabelModule,
        DxoConstantLineStyleModule,
        DxoGridModule,
        DxoFormatModule,
        DxoMinorGridModule,
        DxoMinorTickModule,
        DxoMinorTickIntervalModule,
        DxiStripModule,
        DxoStripStyleModule,
        DxoTickModule,
        DxoTickIntervalModule,
        DxoCommonAnnotationSettingsModule,
        DxoCommonAxisSettingsModule,
        DxoCommonSeriesSettingsModule,
        DxoAreaModule,
        DxoHoverStyleModule,
        DxoHatchingModule,
        DxoConnectorModule,
        DxoPointModule,
        DxoSelectionStyleModule,
        DxoValueErrorBarModule,
        DxoBarModule,
        DxoArgumentFormatModule,
        DxoLineModule,
        DxoScatterModule,
        DxoStackedbarModule,
        DxoDataPrepareSettingsModule,
        DxoExportModule,
        DxoLegendModule,
        DxoMarginModule,
        DxoTitleModule,
        DxoSubtitleModule,
        DxoLoadingIndicatorModule,
        DxiSeriesModule,
        DxoSeriesTemplateModule,
        DxoSizeModule,
        DxoTooltipModule,
        DxoValueAxisModule,
        DxoMinVisualRangeLengthModule,
        DxTemplateModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxPolarChartModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoAdaptiveLayoutModule,
                    DxoAnimationModule,
                    DxiAnnotationModule,
                    DxoBorderModule,
                    DxoFontModule,
                    DxoImageModule,
                    DxoShadowModule,
                    DxoArgumentAxisModule,
                    DxiConstantLineModule,
                    DxoLabelModule,
                    DxoConstantLineStyleModule,
                    DxoGridModule,
                    DxoFormatModule,
                    DxoMinorGridModule,
                    DxoMinorTickModule,
                    DxoMinorTickIntervalModule,
                    DxiStripModule,
                    DxoStripStyleModule,
                    DxoTickModule,
                    DxoTickIntervalModule,
                    DxoCommonAnnotationSettingsModule,
                    DxoCommonAxisSettingsModule,
                    DxoCommonSeriesSettingsModule,
                    DxoAreaModule,
                    DxoHoverStyleModule,
                    DxoHatchingModule,
                    DxoConnectorModule,
                    DxoPointModule,
                    DxoSelectionStyleModule,
                    DxoValueErrorBarModule,
                    DxoBarModule,
                    DxoArgumentFormatModule,
                    DxoLineModule,
                    DxoScatterModule,
                    DxoStackedbarModule,
                    DxoDataPrepareSettingsModule,
                    DxoExportModule,
                    DxoLegendModule,
                    DxoMarginModule,
                    DxoTitleModule,
                    DxoSubtitleModule,
                    DxoLoadingIndicatorModule,
                    DxiSeriesModule,
                    DxoSeriesTemplateModule,
                    DxoSizeModule,
                    DxoTooltipModule,
                    DxoValueAxisModule,
                    DxoMinVisualRangeLengthModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxPolarChartComponent
                ],
                exports: [
                    DxPolarChartComponent,
                    DxoAdaptiveLayoutModule,
                    DxoAnimationModule,
                    DxiAnnotationModule,
                    DxoBorderModule,
                    DxoFontModule,
                    DxoImageModule,
                    DxoShadowModule,
                    DxoArgumentAxisModule,
                    DxiConstantLineModule,
                    DxoLabelModule,
                    DxoConstantLineStyleModule,
                    DxoGridModule,
                    DxoFormatModule,
                    DxoMinorGridModule,
                    DxoMinorTickModule,
                    DxoMinorTickIntervalModule,
                    DxiStripModule,
                    DxoStripStyleModule,
                    DxoTickModule,
                    DxoTickIntervalModule,
                    DxoCommonAnnotationSettingsModule,
                    DxoCommonAxisSettingsModule,
                    DxoCommonSeriesSettingsModule,
                    DxoAreaModule,
                    DxoHoverStyleModule,
                    DxoHatchingModule,
                    DxoConnectorModule,
                    DxoPointModule,
                    DxoSelectionStyleModule,
                    DxoValueErrorBarModule,
                    DxoBarModule,
                    DxoArgumentFormatModule,
                    DxoLineModule,
                    DxoScatterModule,
                    DxoStackedbarModule,
                    DxoDataPrepareSettingsModule,
                    DxoExportModule,
                    DxoLegendModule,
                    DxoMarginModule,
                    DxoTitleModule,
                    DxoSubtitleModule,
                    DxoLoadingIndicatorModule,
                    DxiSeriesModule,
                    DxoSeriesTemplateModule,
                    DxoSizeModule,
                    DxoTooltipModule,
                    DxoValueAxisModule,
                    DxoMinVisualRangeLengthModule,
                    DxTemplateModule
                ]
            }]
    }], function () { return []; }, null); })();
    return DxPolarChartModule;
}());
export { DxPolarChartModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,