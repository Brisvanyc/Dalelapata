/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxiVizScaleBreak } from './base/viz-scale-break-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxiBreakComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxiBreakComponent, _super);
    function DxiBreakComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        return _this;
    }
    Object.defineProperty(DxiBreakComponent.prototype, "_optionPath", {
        get: function () {
            return 'breaks';
        },
        enumerable: true,
        configurable: true
    });
    DxiBreakComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    DxiBreakComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxiBreakComponent);
DxiBreakComponent.ɵfac = function DxiBreakComponent_Factory(t) { return new (t || DxiBreakComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxiBreakComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxiBreakComponent, selectors: [["dxi-break"]], inputs: { endValue: "endValue", startValue: "startValue" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxiBreakComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiBreakComponent, [{
        type: Component,
        args: [{
                selector: 'dxi-break',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'endValue',
                    'startValue'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, null); })();
    return DxiBreakComponent;
}(DxiVizScaleBreak));
export { DxiBreakComponent };
var DxiBreakModule = /** @class */ (function () {
    function DxiBreakModule() {
    }
DxiBreakModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxiBreakModule });
DxiBreakModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxiBreakModule_Factory(t) { return new (t || DxiBreakModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxiBreakModule, { declarations: [DxiBreakComponent], exports: [DxiBreakComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxiBreakModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxiBreakComponent
                ],
                exports: [
                    DxiBreakComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxiBreakModule;
}());
export { DxiBreakModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWstZHhpLmpzIiwic291cmNlcyI6WyJuZzovZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZC9icmVhay1keGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0dBV0c7O0FBRUgsb0NBQW9DO0FBRXBDLGlEQUFpRDtBQUVqRCxPQUFPLEVBQ0gsU0FBUyxFQUNULFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNYLE1BQU0sZUFBZSxDQUFDO0FBTXZCLE9BQU8sRUFDSCxnQkFBZ0IsR0FDbkIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7O0FBYTlEO0lBQXVDLDZDQUFnQjtJQU9uRCwyQkFBZ0MsZ0JBQWtDLEVBQ2xELFVBQTRCO1FBRDVDLFlBRUksaUJBQU8sU0FHVjtRQUZHLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxLQUFJLENBQUMsQ0FBQztRQUN2QyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUksRUFBRSxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDOztJQUM5RCxDQUFDO0lBVkQsc0JBQWMsMENBQVc7YUFBekI7WUFDSSxPQUFPLFFBQVEsQ0FBQztRQUNwQixDQUFDOzs7T0FBQTs7Z0JBR2lELGdCQUFnQix1QkFBckQsUUFBUSxZQUFJLElBQUk7Z0JBQ0QsZ0JBQWdCLHVCQUFuQyxJQUFJOztJQVJKLGlCQUFpQix1QkFBdUIsU0FWcEQsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLFdBQVcsdERBU2pCLENBT1MsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxJQUFJLEVBQUUsQ0FBQTtPQWYvQixRQUFRLEVBQUUsRUFBRSxjQUVaLHpCQWNTLG1CQUFBLElBQUksRUFBRSxDQUFBO01BZE4sRUFBRSxDQUFDLGdCQUFnQixDQUFDLGNBQzdCLE1BQU0sRUFBRSxrQkFDSixqQkFXOEMsZ0JBQWdCO1NBWHBELGtCQUNWLGZBV3dCLGdCQUFnQjtRQVg1QixjQUNmLGZBRVEsaUJBQWlCLENBZTdCO2tCQXRCWSxFQUFFLFdBTWQsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBaUJGO0lBREEsd0JBQUM7Q0FBQSxBQWZELENBQXVDLGdCQUFnQixHQWV0RDtTQWZZLGlCQUFpQjtBQXlCOUI7SUFBQTtJQUE4QixDQUFDO0lBQWxCLGNBQWMsZ0NBUjFCLFFBQVEsQ0FBQztBQUNSLFlBQVksRUFBRSxrQkFDWixpQkFBaUIsY0FDbEIsY0FDRCxPQUFPLEVBQUUsa0JBQ1AsaUJBQWlCLGNBQ2xCO1VBQ0YsQ0FBQyxRQUNXLGNBQWMsQ0FBSTs7Ozs7Ozs7Ozs7Z0RBQy9CO0lBRDhCLHFCQUFDO0NBQUEsQUFBL0IsSUFBK0I7U0FBbEIsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKiBWZXJzaW9uOiAyMC4xLjNcbiAqIEJ1aWxkIGRhdGU6IEZyaSBBcHIgMjQgMjAyMFxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXG4gKlxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcbiAqL1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGggKi9cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOnVzZS1pbnB1dC1wcm9wZXJ0eS1kZWNvcmF0b3IgKi9cclxuXHJcbmltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsXHJcbiAgICBOZ01vZHVsZSxcclxuICAgIEhvc3QsXHJcbiAgICBTa2lwU2VsZlxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmltcG9ydCB7XHJcbiAgICBOZXN0ZWRPcHRpb25Ib3N0LFxyXG59IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhpVml6U2NhbGVCcmVhayB9IGZyb20gJy4vYmFzZS92aXotc2NhbGUtYnJlYWstZHhpJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZHhpLWJyZWFrJyxcclxuICAgIHRlbXBsYXRlOiAnJyxcclxuICAgIHN0eWxlczogWycnXSxcclxuICAgIHByb3ZpZGVyczogW05lc3RlZE9wdGlvbkhvc3RdLFxyXG4gICAgaW5wdXRzOiBbXHJcbiAgICAgICAgJ2VuZFZhbHVlJyxcclxuICAgICAgICAnc3RhcnRWYWx1ZSdcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIER4aUJyZWFrQ29tcG9uZW50IGV4dGVuZHMgRHhpVml6U2NhbGVCcmVhayB7XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldCBfb3B0aW9uUGF0aCgpIHtcclxuICAgICAgICByZXR1cm4gJ2JyZWFrcyc7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBTa2lwU2VsZigpIEBIb3N0KCkgcGFyZW50T3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCxcclxuICAgICAgICAgICAgQEhvc3QoKSBvcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICBwYXJlbnRPcHRpb25Ib3N0LnNldE5lc3RlZE9wdGlvbih0aGlzKTtcclxuICAgICAgICBvcHRpb25Ib3N0LnNldEhvc3QodGhpcywgdGhpcy5fZnVsbE9wdGlvblBhdGguYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIER4aUJyZWFrQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBEeGlCcmVha0NvbXBvbmVudFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeGlCcmVha01vZHVsZSB7IH1cclxuIl19