/*!
 * devextreme-angular
 * Version: 20.1.3
 * Build date: Fri Apr 24 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import * as tslib_1 from "tslib";
/* tslint:disable:max-line-length */
/* tslint:disable:use-input-property-decorator */
import { Component, NgModule, Host, SkipSelf, ContentChildren, forwardRef, QueryList } from '@angular/core';
import { NestedOptionHost, } from 'devextreme-angular/core';
import { DxoPivotGridDataSource } from './base/pivot-grid-data-source';
import { DxiFieldComponent } from './field-dxi';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
var DxoDataSourceComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DxoDataSourceComponent, _super);
    function DxoDataSourceComponent(parentOptionHost, optionHost) {
        var _this = _super.call(this) || this;
        parentOptionHost.setNestedOption(_this);
        optionHost.setHost(_this, _this._fullOptionPath.bind(_this));
        if ((console) && (console.warn)) {
            console.warn('The nested \'dxo-data-source\' component is deprecated in 17.2. ' +
                'Use the \'dataSource\' option instead. ' +
                'See:\nhttps://github.com/DevExpress/devextreme-angular/blob/master/CHANGELOG.md#17.2.3');
        }
        return _this;
    }
    Object.defineProperty(DxoDataSourceComponent.prototype, "_optionPath", {
        get: function () {
            return 'dataSource';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DxoDataSourceComponent.prototype, "fieldsChildren", {
        get: function () {
            return this._getOption('fields');
        },
        set: function (value) {
            this.setChildren('fields', value);
        },
        enumerable: true,
        configurable: true
    });
    DxoDataSourceComponent.prototype.ngOnInit = function () {
        this._addRecreatedComponent();
    };
    DxoDataSourceComponent.prototype.ngOnDestroy = function () {
        this._addRemovedOption(this._getOptionPath());
    };
    DxoDataSourceComponent.ctorParameters = function () { return [
        { type: NestedOptionHost, decorators: [{ type: SkipSelf }, { type: Host }] },
        { type: NestedOptionHost, decorators: [{ type: Host }] }
    ]; };
    tslib_1.__decorate([
        ContentChildren(forwardRef(function () { return DxiFieldComponent; })),
        tslib_1.__metadata("design:type", QueryList),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], DxoDataSourceComponent.prototype, "fieldsChildren", null);
    DxoDataSourceComponent = tslib_1.__decorate([ tslib_1.__param(0, SkipSelf()), tslib_1.__param(0, Host()),
        tslib_1.__param(1, Host()),
        tslib_1.__metadata("design:paramtypes", [NestedOptionHost,
            NestedOptionHost])
    ], DxoDataSourceComponent);
DxoDataSourceComponent.ɵfac = function DxoDataSourceComponent_Factory(t) { return new (t || DxoDataSourceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 5), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost, 1)); };
DxoDataSourceComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DxoDataSourceComponent, selectors: [["dxo-data-source"]], contentQueries: function DxoDataSourceComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiFieldComponent, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fieldsChildren = _t);
    } }, inputs: { fields: "fields", filter: "filter", onChanged: "onChanged", onFieldsPrepared: "onFieldsPrepared", onLoadError: "onLoadError", onLoadingChanged: "onLoadingChanged", remoteOperations: "remoteOperations", retrieveFields: "retrieveFields", store: "store" }, features: [ɵngcc0.ɵɵProvidersFeature([NestedOptionHost]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function DxoDataSourceComponent_Template(rf, ctx) { }, styles: [""] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoDataSourceComponent, [{
        type: Component,
        args: [{
                selector: 'dxo-data-source',
                template: '',
                providers: [NestedOptionHost],
                inputs: [
                    'fields',
                    'filter',
                    'onChanged',
                    'onFieldsPrepared',
                    'onLoadError',
                    'onLoadingChanged',
                    'remoteOperations',
                    'retrieveFields',
                    'store'
                ],
                styles: ['']
            }]
    }], function () { return [{ type: ɵngcc1.NestedOptionHost, decorators: [{
                type: SkipSelf
            }, {
                type: Host
            }] }, { type: ɵngcc1.NestedOptionHost, decorators: [{
                type: Host
            }] }]; }, { fieldsChildren: [{
            type: ContentChildren,
            args: [forwardRef(function () { return DxiFieldComponent; })]
        }] }); })();
    return DxoDataSourceComponent;
}(DxoPivotGridDataSource));
export { DxoDataSourceComponent };
var DxoDataSourceModule = /** @class */ (function () {
    function DxoDataSourceModule() {
    }
DxoDataSourceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DxoDataSourceModule });
DxoDataSourceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DxoDataSourceModule_Factory(t) { return new (t || DxoDataSourceModule)(); } });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxoDataSourceModule, { declarations: [DxoDataSourceComponent], exports: [DxoDataSourceComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DxoDataSourceModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    DxoDataSourceComponent
                ],
                exports: [
                    DxoDataSourceComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return DxoDataSourceModule;
}());
export { DxoDataSourceModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zb3VyY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9kZXZleHRyZW1lLWFuZ3VsYXIvdWkvbmVzdGVkL2RhdGEtc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztHQVdHOztBQUVILG9DQUFvQztBQUVwQyxpREFBaUQ7QUFFakQsT0FBTyxFQUNILFNBQVMsRUFHVCxRQUFRLEVBQ1IsSUFBSSxFQUNKLFFBQVEsRUFDUixlQUFlLEVBQ2YsVUFBVSxFQUNWLFNBQVMsRUFDWixNQUFNLGVBQWUsQ0FBQztBQU12QixPQUFPLEVBQ0gsZ0JBQWdCLEdBQ25CLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdkUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sYUFBYSxDQUFDOzs7QUFvQmhEO0lBQTRDLGtEQUFzQjtJQWU5RCxnQ0FBZ0MsZ0JBQWtDLEVBQ2xELFVBQTRCO1FBRDVDLFlBRUksaUJBQU8sU0FTVjtRQVJHLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxLQUFJLENBQUMsQ0FBQztRQUN2QyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUksRUFBRSxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3QixPQUFPLENBQUMsSUFBSSxDQUFDLGtFQUFrRTtnQkFDM0UseUNBQXlDO2dCQUN6Qyx3RkFBd0YsQ0FDM0YsQ0FBQztTQUNMOztJQUNMLENBQUM7SUF4QkQsc0JBQWMsK0NBQVc7YUFBekI7WUFDSSxPQUFPLFlBQVksQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUlELHNCQUFJLGtEQUFjO2FBQWxCO1lBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JDLENBQUM7YUFDRCxVQUFtQixLQUFLO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLENBQUM7OztPQUhBO0lBbUJELHlDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsNENBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDOztnQkFwQmlELGdCQUFnQix1QkFBckQsUUFBUSxZQUFJLElBQUk7Z0JBQ0QsZ0JBQWdCLHVCQUFuQyxJQUFJOztJQVJiO1FBREMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxjQUFNLE9BQUEsaUJBQWlCLEVBQWpCLENBQWlCLENBQUMsQ0FBQzswQ0FDL0IsU0FBUzs7Z0VBRTlCO0lBVlEsc0JBQXNCLHVCQUF1QixTQWpCekQsU0FBUyxDQUFDLGNBQ1AsUUFBUSxFQUFFLGlCQUFpQiw1REFnQnZCLENBZVMsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxJQUFJLEVBQUUsQ0FBQTthQTlCL0IsUUFBUSxFQUFFLEVBQUUsakJBK0JILG1CQUFBLElBQUksRUFBRSxDQUFBO0dBN0JmLFNBQVMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLGNBQzdCLE1BQU0sRUFBRSxMQTJCMEMsZ0JBQWdCO0tBMUI5RCxRQUFRLERBMkJnQixnQkFBZ0I7QUExQnhDLFFBQVEsa0JBQ1IsbkJBU0ssc0JBQXNCLENBcUNsQztLQTlDa0Isa0JBQ1gsa0JBQWtCLGtCQUNsQixhQUFhLGtCQUNiLGtCQUFrQixrQkFDbEIsa0JBQWtCLGtCQUNsQixnQkFBZ0Isa0JBQ2hCLE9BQU8sY0FDVjtZQVpRLEVBQUUsV0FhZCxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQXVDRjtJQURBLDZCQUFDO0NBQUEsQUFyQ0QsQ0FBNEMsc0JBQXNCLEdBcUNqRTtTQXJDWSxzQkFBc0I7QUErQ25DO0lBQUE7SUFBbUMsQ0FBQztJQUF2QixtQkFBbUIsZ0NBUi9CLFFBQVEsQ0FBQyxjQUNSO09BQVksRUFBRSxrQkFDWixzQkFBc0IsY0FDdkIsY0FDRCxPQUFPLEVBQUUsa0JBQ1Asc0JBQXNCLGNBQ3ZCO0FBQ0YsQ0FBQyxRQUNXLG1CQUFtQixDQUFJOzs7Ozs7Ozs7OztnREFDcEM7SUFEbUMsMEJBQUM7Q0FBQSxBQUFwQyxJQUFvQztTQUF2QixtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxuICogVmVyc2lvbjogMjAuMS4zXG4gKiBCdWlsZCBkYXRlOiBGcmkgQXByIDI0IDIwMjBcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTIgLSAyMDIwIERldmVsb3BlciBFeHByZXNzIEluYy4gQUxMIFJJR0hUUyBSRVNFUlZFRFxuICpcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcbiAqIG9mIHRoZSBNSVQgbGljZW5zZS4gU2VlIHRoZSBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3Qgb2YgdGhlIHByb2plY3QgZm9yIGRldGFpbHMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXG4gKi9cblxuLyogdHNsaW50OmRpc2FibGU6bWF4LWxpbmUtbGVuZ3RoICovXHJcblxyXG4vKiB0c2xpbnQ6ZGlzYWJsZTp1c2UtaW5wdXQtcHJvcGVydHktZGVjb3JhdG9yICovXHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgT25Jbml0LFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgTmdNb2R1bGUsXHJcbiAgICBIb3N0LFxyXG4gICAgU2tpcFNlbGYsXHJcbiAgICBDb250ZW50Q2hpbGRyZW4sXHJcbiAgICBmb3J3YXJkUmVmLFxyXG4gICAgUXVlcnlMaXN0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuXHJcblxyXG5cclxuaW1wb3J0IHtcclxuICAgIE5lc3RlZE9wdGlvbkhvc3QsXHJcbn0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeG9QaXZvdEdyaWREYXRhU291cmNlIH0gZnJvbSAnLi9iYXNlL3Bpdm90LWdyaWQtZGF0YS1zb3VyY2UnO1xyXG5pbXBvcnQgeyBEeGlGaWVsZENvbXBvbmVudCB9IGZyb20gJy4vZmllbGQtZHhpJztcclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZHhvLWRhdGEtc291cmNlJyxcclxuICAgIHRlbXBsYXRlOiAnJyxcclxuICAgIHN0eWxlczogWycnXSxcclxuICAgIHByb3ZpZGVyczogW05lc3RlZE9wdGlvbkhvc3RdLFxyXG4gICAgaW5wdXRzOiBbXHJcbiAgICAgICAgJ2ZpZWxkcycsXHJcbiAgICAgICAgJ2ZpbHRlcicsXHJcbiAgICAgICAgJ29uQ2hhbmdlZCcsXHJcbiAgICAgICAgJ29uRmllbGRzUHJlcGFyZWQnLFxyXG4gICAgICAgICdvbkxvYWRFcnJvcicsXHJcbiAgICAgICAgJ29uTG9hZGluZ0NoYW5nZWQnLFxyXG4gICAgICAgICdyZW1vdGVPcGVyYXRpb25zJyxcclxuICAgICAgICAncmV0cmlldmVGaWVsZHMnLFxyXG4gICAgICAgICdzdG9yZSdcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIER4b0RhdGFTb3VyY2VDb21wb25lbnQgZXh0ZW5kcyBEeG9QaXZvdEdyaWREYXRhU291cmNlIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQgIHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgZ2V0IF9vcHRpb25QYXRoKCkge1xyXG4gICAgICAgIHJldHVybiAnZGF0YVNvdXJjZSc7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIEBDb250ZW50Q2hpbGRyZW4oZm9yd2FyZFJlZigoKSA9PiBEeGlGaWVsZENvbXBvbmVudCkpXHJcbiAgICBnZXQgZmllbGRzQ2hpbGRyZW4oKTogUXVlcnlMaXN0PER4aUZpZWxkQ29tcG9uZW50PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE9wdGlvbignZmllbGRzJyk7XHJcbiAgICB9XHJcbiAgICBzZXQgZmllbGRzQ2hpbGRyZW4odmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNldENoaWxkcmVuKCdmaWVsZHMnLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoQFNraXBTZWxmKCkgQEhvc3QoKSBwYXJlbnRPcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0LFxyXG4gICAgICAgICAgICBASG9zdCgpIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHBhcmVudE9wdGlvbkhvc3Quc2V0TmVzdGVkT3B0aW9uKHRoaXMpO1xyXG4gICAgICAgIG9wdGlvbkhvc3Quc2V0SG9zdCh0aGlzLCB0aGlzLl9mdWxsT3B0aW9uUGF0aC5iaW5kKHRoaXMpKTtcclxuICAgICAgICBpZiAoKGNvbnNvbGUpICYmIChjb25zb2xlLndhcm4pKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignVGhlIG5lc3RlZCBcXCdkeG8tZGF0YS1zb3VyY2VcXCcgY29tcG9uZW50IGlzIGRlcHJlY2F0ZWQgaW4gMTcuMi4gJyArXHJcbiAgICAgICAgICAgICAgICAnVXNlIHRoZSBcXCdkYXRhU291cmNlXFwnIG9wdGlvbiBpbnN0ZWFkLiAnICtcclxuICAgICAgICAgICAgICAgICdTZWU6XFxuaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyL2Jsb2IvbWFzdGVyL0NIQU5HRUxPRy5tZCMxNy4yLjMnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLl9hZGRSZWNyZWF0ZWRDb21wb25lbnQoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLl9hZGRSZW1vdmVkT3B0aW9uKHRoaXMuX2dldE9wdGlvblBhdGgoKSk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgRHhvRGF0YVNvdXJjZUNvbXBvbmVudFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgRHhvRGF0YVNvdXJjZUNvbXBvbmVudFxyXG4gIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEeG9EYXRhU291cmNlTW9kdWxlIHsgfVxyXG4iXX0=