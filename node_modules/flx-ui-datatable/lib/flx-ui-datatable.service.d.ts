import { Http } from '@angular/http';
import { Observable, BehaviorSubject, Subscription } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class FlxUiDatatableService {
    http: Http;
    private dataUrl;
    behavior: BehaviorSubject<any>;
    flxData: Observable<any>;
    pagination: Array<Object>;
    totalItems: number;
    dataOffset: number;
    limit: number;
    dataSrcKey: string;
    multipleDeletion: Array<any>;
    loader: Subscription;
    loadFinish: boolean;
    private lazyloadingConfig;
    processedData: any;
    constructor(http: Http);
    setLazyloadingConfig(config: any): void;
    /**
     *
     * @param url User api rul
     */
    getData(url: string): Observable<any>;
    /**
     *
     * @param url Service api url
     * @param id Datatype id to export
     * @param data Data to export
     */
    postData(url: string, id: any, data: string): Observable<any>;
    /**
     *
     * @param dataUrl Set dataurl
     */
    setDataUrl(dataUrl: string): void;
    getDataUrl(): string;
    /**
     *
     * @param data Register new data from user API
     */
    chageDataTable(data: any): void;
    /**
     *
     * @param numberOfList Total number of list
     * @param limit Pagination limit
     */
    private createPagination(numberOfList, limit);
    isLazyLoadingEnabled(): any;
    loadFlxDataTableData(dataUrl: string, setSelectPagination?: boolean): void;
    cancelLoading(): void;
    setDataSrcKey(srcKey: string): void;
    getDataLength(): Promise<number>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlxUiDatatableService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FlxUiDatatableService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx4LXVpLWRhdGF0YWJsZS5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImZseC11aS1kYXRhdGFibGUuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtREEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZseFVpRGF0YXRhYmxlU2VydmljZSB7XHJcbiAgICBodHRwOiBIdHRwO1xyXG4gICAgcHJpdmF0ZSBkYXRhVXJsO1xyXG4gICAgYmVoYXZpb3I6IEJlaGF2aW9yU3ViamVjdDxhbnk+O1xyXG4gICAgZmx4RGF0YTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgcGFnaW5hdGlvbjogQXJyYXk8T2JqZWN0PjtcclxuICAgIHRvdGFsSXRlbXM6IG51bWJlcjtcclxuICAgIGRhdGFPZmZzZXQ6IG51bWJlcjtcclxuICAgIGxpbWl0OiBudW1iZXI7XHJcbiAgICBkYXRhU3JjS2V5OiBzdHJpbmc7XHJcbiAgICBtdWx0aXBsZURlbGV0aW9uOiBBcnJheTxhbnk+O1xyXG4gICAgbG9hZGVyOiBTdWJzY3JpcHRpb247XHJcbiAgICBsb2FkRmluaXNoOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBsYXp5bG9hZGluZ0NvbmZpZztcclxuICAgIHByb2Nlc3NlZERhdGE6IGFueTtcclxuICAgIGNvbnN0cnVjdG9yKGh0dHA6IEh0dHApO1xyXG4gICAgc2V0TGF6eWxvYWRpbmdDb25maWcoY29uZmlnOiBhbnkpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVybCBVc2VyIGFwaSBydWxcclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YSh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB1cmwgU2VydmljZSBhcGkgdXJsXHJcbiAgICAgKiBAcGFyYW0gaWQgRGF0YXR5cGUgaWQgdG8gZXhwb3J0XHJcbiAgICAgKiBAcGFyYW0gZGF0YSBEYXRhIHRvIGV4cG9ydFxyXG4gICAgICovXHJcbiAgICBwb3N0RGF0YSh1cmw6IHN0cmluZywgaWQ6IGFueSwgZGF0YTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+O1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGRhdGFVcmwgU2V0IGRhdGF1cmxcclxuICAgICAqL1xyXG4gICAgc2V0RGF0YVVybChkYXRhVXJsOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgZ2V0RGF0YVVybCgpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gZGF0YSBSZWdpc3RlciBuZXcgZGF0YSBmcm9tIHVzZXIgQVBJXHJcbiAgICAgKi9cclxuICAgIGNoYWdlRGF0YVRhYmxlKGRhdGE6IGFueSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbnVtYmVyT2ZMaXN0IFRvdGFsIG51bWJlciBvZiBsaXN0XHJcbiAgICAgKiBAcGFyYW0gbGltaXQgUGFnaW5hdGlvbiBsaW1pdFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNyZWF0ZVBhZ2luYXRpb24obnVtYmVyT2ZMaXN0LCBsaW1pdCk7XHJcbiAgICBpc0xhenlMb2FkaW5nRW5hYmxlZCgpOiBhbnk7XHJcbiAgICBsb2FkRmx4RGF0YVRhYmxlRGF0YShkYXRhVXJsOiBzdHJpbmcsIHNldFNlbGVjdFBhZ2luYXRpb24/OiBib29sZWFuKTogdm9pZDtcclxuICAgIGNhbmNlbExvYWRpbmcoKTogdm9pZDtcclxuICAgIHNldERhdGFTcmNLZXkoc3JjS2V5OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgZ2V0RGF0YUxlbmd0aCgpOiBQcm9taXNlPG51bWJlcj47XHJcbn1cclxuIl19