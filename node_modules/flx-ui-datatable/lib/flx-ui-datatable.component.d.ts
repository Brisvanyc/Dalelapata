import { EventEmitter, OnInit, AfterViewInit } from '@angular/core';
import { FormGroup, FormBuilder } from '@angular/forms';
import { FlxUiDatatableService } from './flx-ui-datatable.service';
import { BehaviorSubject, Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare class FlxUiDatatableComponent implements OnInit, AfterViewInit {
    __form: FormBuilder;
    service: FlxUiDatatableService;
    classes: any;
    headers: Array<string>;
    lazyloadingConfig: any;
    embedPictures: any;
    dataKeys: Array<string>;
    enableDataExports: boolean;
    dataExportsConfig: any;
    showBottomInfo: false;
    searchKeys: any[];
    dataSrcKey: string;
    hasActionButtons: boolean;
    hideNumbers: boolean;
    enableMultipleSelection: boolean;
    multipleSelectKey: string;
    hasAddButton: boolean;
    dataUrl: string;
    actionButtonStart: boolean;
    multipleSelectButton: {
        text: string;
        icon: string;
    };
    searchPlaceholder: string;
    actionHeader: string;
    limit: number;
    spinnerSrc: any;
    actionButtons: Array<Object>;
    paginationButtons: any;
    tableHeader: any;
    searchButton: any;
    addButton: any;
    searchBar: any;
    actionButtonsConfig: any;
    firstActionButtonClicked: EventEmitter<any>;
    secondActionButtonClicked: EventEmitter<any>;
    thirdActionButtonClicked: EventEmitter<any>;
    multipleSelectClicked: EventEmitter<any>;
    addButtonClicked: EventEmitter<any>;
    /**  18/12/2018 */
    textSubstring: any;
    conditionManipulator: any;
    isExportAll: boolean;
    searchForm: FormGroup;
    tData: any;
    behavior: BehaviorSubject<any>;
    searchDataTempOffset: any[];
    displayData: Observable<any>;
    offset: number;
    reloadUrl: string;
    isSearching: boolean;
    searchResultFound: Array<any>;
    constructor(__form: FormBuilder, service: FlxUiDatatableService);
    reload(): void;
    /**
     *
     * @param checked Export all selection
     */
    checkToExportOption(checked: boolean): void;
    /**
     *
     * @param exportType Export type: print|pdf|excel|word
     */
    exportDocumentsAs(exportType: string): void;
    hasImageEmbeded(): boolean;
    getImage(): void;
    JSONToCSVConvertor(JSONData: any, ReportTitle: any, ShowLabel: any): void;
    /**
     *
     * @param newData
     */
    changeDisplayData(newData: any): void;
    ngOnInit(): void;
    searchDataInApi(values: any, form: any): void;
    ngAfterViewInit(): void;
    setColumnWidths(): void;
    private returColumnswidth();
    actionButtonClicked(index: number, buttonIndex: number): void;
    addButtonClick(): void;
    confirmDelete(): void;
    addRemove(checked: boolean): void;
    addRemoveDeleteItem(dataKeyvalue: any, index: number, selected: boolean): void;
    getSearchColumns(): "col-md-6 search-container" | "col-md-7 search-container" | "col-md-8 search-container";
    disablePrevtButton(): boolean;
    disableNextButton(): boolean;
    isLazyloadingEnabled(): boolean;
    nextPrevItem(type: string): void;
    filterData(searchString?: string): void;
    /**
     * @param value offset value
     */
    paginateDatatable(value: any): void;
    /**
     *
     * @param value pagination number
     * Perform pagination to the dataset
     * @return
     */
    paginateDatatableRecord(value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FlxUiDatatableComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<FlxUiDatatableComponent, "flx-ui-datatable", never, {
    "classes": "classes";
    "headers": "headers";
    "lazyloadingConfig": "lazyloadingConfig";
    "embedPictures": "embedPictures";
    "dataKeys": "dataKeys";
    "enableDataExports": "enableDataExports";
    "dataExportsConfig": "dataExportsConfig";
    "searchKeys": "searchKeys";
    "dataSrcKey": "dataSrcKey";
    "hasActionButtons": "hasActionButtons";
    "hideNumbers": "hideNumbers";
    "enableMultipleSelection": "enableMultipleSelection";
    "multipleSelectKey": "multipleSelectKey";
    "hasAddButton": "hasAddButton";
    "dataUrl": "dataUrl";
    "actionButtonStart": "actionButtonStart";
    "multipleSelectButton": "multipleSelectButton";
    "searchPlaceholder": "searchPlaceholder";
    "actionHeader": "actionHeader";
    "limit": "limit";
    "spinnerSrc": "spinnerSrc";
    "actionButtons": "actionButtons";
    "paginationButtons": "paginationButtons";
    "tableHeader": "tableHeader";
    "searchButton": "searchButton";
    "addButton": "addButton";
    "searchBar": "searchBar";
    "actionButtonsConfig": "actionButtonsConfig";
    "textSubstring": "textSubstring";
    "conditionManipulator": "conditionManipulator";
    "showBottomInfo": "showBottomInfo";
}, {
    "firstActionButtonClicked": "firstActionButtonClicked";
    "secondActionButtonClicked": "secondActionButtonClicked";
    "thirdActionButtonClicked": "thirdActionButtonClicked";
    "multipleSelectClicked": "multipleSelectClicked";
    "addButtonClicked": "addButtonClicked";
}, never>;
}
import { ElementRef } from '@angular/core';
export declare class ImageFallBack {
    imgSrc: string;
    private el;
    private isApplied;
    private EVENT_TYPE;
    constructor(el: ElementRef);
    private onError();
    private removeEvents();
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageFallBack>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ImageFallBack, "[flx-ui-datatable-img-fallback]", never, {
    "imgSrc": "flx-ui-datatable-img-fallback";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx4LXVpLWRhdGF0YWJsZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZmx4LXVpLWRhdGF0YWJsZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvR0E7Ozs7Ozs7Ozs7Ozs7OztBQVdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRm9ybUdyb3VwLCBGb3JtQnVpbGRlciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgRmx4VWlEYXRhdGFibGVTZXJ2aWNlIH0gZnJvbSAnLi9mbHgtdWktZGF0YXRhYmxlLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRmx4VWlEYXRhdGFibGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gICAgX19mb3JtOiBGb3JtQnVpbGRlcjtcclxuICAgIHNlcnZpY2U6IEZseFVpRGF0YXRhYmxlU2VydmljZTtcclxuICAgIGNsYXNzZXM6IGFueTtcclxuICAgIGhlYWRlcnM6IEFycmF5PHN0cmluZz47XHJcbiAgICBsYXp5bG9hZGluZ0NvbmZpZzogYW55O1xyXG4gICAgZW1iZWRQaWN0dXJlczogYW55O1xyXG4gICAgZGF0YUtleXM6IEFycmF5PHN0cmluZz47XHJcbiAgICBlbmFibGVEYXRhRXhwb3J0czogYm9vbGVhbjtcclxuICAgIGRhdGFFeHBvcnRzQ29uZmlnOiBhbnk7XHJcbiAgICBzaG93Qm90dG9tSW5mbzogZmFsc2U7XHJcbiAgICBzZWFyY2hLZXlzOiBhbnlbXTtcclxuICAgIGRhdGFTcmNLZXk6IHN0cmluZztcclxuICAgIGhhc0FjdGlvbkJ1dHRvbnM6IGJvb2xlYW47XHJcbiAgICBoaWRlTnVtYmVyczogYm9vbGVhbjtcclxuICAgIGVuYWJsZU11bHRpcGxlU2VsZWN0aW9uOiBib29sZWFuO1xyXG4gICAgbXVsdGlwbGVTZWxlY3RLZXk6IHN0cmluZztcclxuICAgIGhhc0FkZEJ1dHRvbjogYm9vbGVhbjtcclxuICAgIGRhdGFVcmw6IHN0cmluZztcclxuICAgIGFjdGlvbkJ1dHRvblN0YXJ0OiBib29sZWFuO1xyXG4gICAgbXVsdGlwbGVTZWxlY3RCdXR0b246IHtcclxuICAgICAgICB0ZXh0OiBzdHJpbmc7XHJcbiAgICAgICAgaWNvbjogc3RyaW5nO1xyXG4gICAgfTtcclxuICAgIHNlYXJjaFBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgICBhY3Rpb25IZWFkZXI6IHN0cmluZztcclxuICAgIGxpbWl0OiBudW1iZXI7XHJcbiAgICBzcGlubmVyU3JjOiBhbnk7XHJcbiAgICBhY3Rpb25CdXR0b25zOiBBcnJheTxPYmplY3Q+O1xyXG4gICAgcGFnaW5hdGlvbkJ1dHRvbnM6IGFueTtcclxuICAgIHRhYmxlSGVhZGVyOiBhbnk7XHJcbiAgICBzZWFyY2hCdXR0b246IGFueTtcclxuICAgIGFkZEJ1dHRvbjogYW55O1xyXG4gICAgc2VhcmNoQmFyOiBhbnk7XHJcbiAgICBhY3Rpb25CdXR0b25zQ29uZmlnOiBhbnk7XHJcbiAgICBmaXJzdEFjdGlvbkJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgc2Vjb25kQWN0aW9uQnV0dG9uQ2xpY2tlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICB0aGlyZEFjdGlvbkJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgbXVsdGlwbGVTZWxlY3RDbGlja2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGFkZEJ1dHRvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqICAxOC8xMi8yMDE4ICovXHJcbiAgICB0ZXh0U3Vic3RyaW5nOiBhbnk7XHJcbiAgICBjb25kaXRpb25NYW5pcHVsYXRvcjogYW55O1xyXG4gICAgaXNFeHBvcnRBbGw6IGJvb2xlYW47XHJcbiAgICBzZWFyY2hGb3JtOiBGb3JtR3JvdXA7XHJcbiAgICB0RGF0YTogYW55O1xyXG4gICAgYmVoYXZpb3I6IEJlaGF2aW9yU3ViamVjdDxhbnk+O1xyXG4gICAgc2VhcmNoRGF0YVRlbXBPZmZzZXQ6IGFueVtdO1xyXG4gICAgZGlzcGxheURhdGE6IE9ic2VydmFibGU8YW55PjtcclxuICAgIG9mZnNldDogbnVtYmVyO1xyXG4gICAgcmVsb2FkVXJsOiBzdHJpbmc7XHJcbiAgICBpc1NlYXJjaGluZzogYm9vbGVhbjtcclxuICAgIHNlYXJjaFJlc3VsdEZvdW5kOiBBcnJheTxhbnk+O1xyXG4gICAgY29uc3RydWN0b3IoX19mb3JtOiBGb3JtQnVpbGRlciwgc2VydmljZTogRmx4VWlEYXRhdGFibGVTZXJ2aWNlKTtcclxuICAgIHJlbG9hZCgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNoZWNrZWQgRXhwb3J0IGFsbCBzZWxlY3Rpb25cclxuICAgICAqL1xyXG4gICAgY2hlY2tUb0V4cG9ydE9wdGlvbihjaGVja2VkOiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBleHBvcnRUeXBlIEV4cG9ydCB0eXBlOiBwcmludHxwZGZ8ZXhjZWx8d29yZFxyXG4gICAgICovXHJcbiAgICBleHBvcnREb2N1bWVudHNBcyhleHBvcnRUeXBlOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgaGFzSW1hZ2VFbWJlZGVkKCk6IGJvb2xlYW47XHJcbiAgICBnZXRJbWFnZSgpOiB2b2lkO1xyXG4gICAgSlNPTlRvQ1NWQ29udmVydG9yKEpTT05EYXRhOiBhbnksIFJlcG9ydFRpdGxlOiBhbnksIFNob3dMYWJlbDogYW55KTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuZXdEYXRhXHJcbiAgICAgKi9cclxuICAgIGNoYW5nZURpc3BsYXlEYXRhKG5ld0RhdGE6IGFueSk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgc2VhcmNoRGF0YUluQXBpKHZhbHVlczogYW55LCBmb3JtOiBhbnkpOiB2b2lkO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBzZXRDb2x1bW5XaWR0aHMoKTogdm9pZDtcclxuICAgIHByaXZhdGUgcmV0dXJDb2x1bW5zd2lkdGgoKTtcclxuICAgIGFjdGlvbkJ1dHRvbkNsaWNrZWQoaW5kZXg6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBhZGRCdXR0b25DbGljaygpOiB2b2lkO1xyXG4gICAgY29uZmlybURlbGV0ZSgpOiB2b2lkO1xyXG4gICAgYWRkUmVtb3ZlKGNoZWNrZWQ6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgYWRkUmVtb3ZlRGVsZXRlSXRlbShkYXRhS2V5dmFsdWU6IGFueSwgaW5kZXg6IG51bWJlciwgc2VsZWN0ZWQ6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgZ2V0U2VhcmNoQ29sdW1ucygpOiBcImNvbC1tZC02IHNlYXJjaC1jb250YWluZXJcIiB8IFwiY29sLW1kLTcgc2VhcmNoLWNvbnRhaW5lclwiIHwgXCJjb2wtbWQtOCBzZWFyY2gtY29udGFpbmVyXCI7XHJcbiAgICBkaXNhYmxlUHJldnRCdXR0b24oKTogYm9vbGVhbjtcclxuICAgIGRpc2FibGVOZXh0QnV0dG9uKCk6IGJvb2xlYW47XHJcbiAgICBpc0xhenlsb2FkaW5nRW5hYmxlZCgpOiBib29sZWFuO1xyXG4gICAgbmV4dFByZXZJdGVtKHR5cGU6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICBmaWx0ZXJEYXRhKHNlYXJjaFN0cmluZz86IHN0cmluZyk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSB2YWx1ZSBvZmZzZXQgdmFsdWVcclxuICAgICAqL1xyXG4gICAgcGFnaW5hdGVEYXRhdGFibGUodmFsdWU6IGFueSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgcGFnaW5hdGlvbiBudW1iZXJcclxuICAgICAqIFBlcmZvcm0gcGFnaW5hdGlvbiB0byB0aGUgZGF0YXNldFxyXG4gICAgICogQHJldHVyblxyXG4gICAgICovXHJcbiAgICBwYWdpbmF0ZURhdGF0YWJsZVJlY29yZCh2YWx1ZTogYW55KTogdm9pZDtcclxufVxyXG5pbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEltYWdlRmFsbEJhY2sge1xyXG4gICAgaW1nU3JjOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGVsO1xyXG4gICAgcHJpdmF0ZSBpc0FwcGxpZWQ7XHJcbiAgICBwcml2YXRlIEVWRU5UX1RZUEU7XHJcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZik7XHJcbiAgICBwcml2YXRlIG9uRXJyb3IoKTtcclxuICAgIHByaXZhdGUgcmVtb3ZlRXZlbnRzKCk7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG59XHJcbiJdfQ==