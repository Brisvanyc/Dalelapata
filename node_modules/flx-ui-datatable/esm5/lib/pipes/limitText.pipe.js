/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { FlxUiDatatableService } from '../flx-ui-datatable.service';
import * as ɵngcc0 from '@angular/core';
var LimitText = /** @class */ (function () {
    function LimitText(service) {
        this.service = service;
    }
    /**
     * @param {?} mainpulationConfig
     * @param {?} text
     * @return {?}
     */
    LimitText.prototype.transform = /**
     * @param {?} mainpulationConfig
     * @param {?} text
     * @return {?}
     */
    function (mainpulationConfig, text) {
        var /** @type {?} */ from = (mainpulationConfig.hasOwnProperty("from")) ? mainpulationConfig['from'] : 0;
        var /** @type {?} */ to = (mainpulationConfig.hasOwnProperty("to")) ? mainpulationConfig["to"] : text.length;
        var /** @type {?} */ appendDots = (mainpulationConfig.hasOwnProperty("appendDots")) ? mainpulationConfig["appendDots"] : "";
        var /** @type {?} */ txt = "";
        if (text.length > to) {
            txt = text.substring(from, to) + appendDots;
        }
        else {
            txt = text;
        }
        return txt;
    };
    /** @nocollapse */
    LimitText.ctorParameters = function () { return [
        { type: FlxUiDatatableService }
    ]; };
LimitText.ɵfac = function LimitText_Factory(t) { return new (t || LimitText)(ɵngcc0.ɵɵdirectiveInject(FlxUiDatatableService)); };
LimitText.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "limittext", type: LimitText, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(LimitText, [{
        type: Pipe,
        args: [{
                name: 'limittext'
            }]
    }], function () { return [{ type: FlxUiDatatableService }]; }, null); })();
    return LimitText;
}());
export { LimitText };
function LimitText_tsickle_Closure_declarations() {
    /** @type {?} */
    LimitText.prototype.service;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGltaXRUZXh0LnBpcGUuanMiLCJzb3VyY2VzIjpbIm5nOi9mbHgtdWktZGF0YXRhYmxlL2xpYi9waXBlcy9saW1pdFRleHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUU7QUFDcEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBQ3BFO0lBSUksbUJBQW1CLE9BQTZCO1FBQTdCLFlBQU8sR0FBUCxPQUFPLENBQXNCO0tBRS9DOzs7Ozs7SUFFRCw2QkFBUzs7Ozs7SUFBVCxVQUFVLGtCQUF5QixFQUFDLElBQVc7UUFDM0MscUJBQUksSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUU7UUFDekYscUJBQUksRUFBRSxHQUFHLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFFO1FBQzdGLHFCQUFJLFVBQVUsR0FBRyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFO1FBQzVHLHFCQUFJLEdBQUcsR0FBVSxFQUFFLENBQUU7UUFDckIsRUFBRSxDQUFBLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDO1lBQ2YsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFDLEVBQUUsQ0FBQyxHQUFFLFVBQVUsQ0FBRTtTQUM5QztRQUFBLElBQUksQ0FBQSxDQUFDO1lBQ0YsR0FBRyxHQUFHLElBQUksQ0FBRTtTQUNmO1FBRUQsTUFBTSxDQUFDLEdBQUcsQ0FBRTtLQUNmLENBQ0wsQUFsQlU7O3NCQUhULElBQUksU0FBQztHQUNGLElBQUksRUFBQyxXQUFXLGtCQUNuQix0QkFIUSxxQkFBcUI7Ozs7Ozs7OzsrRUFBWTtvQkFEMUM7O1NBS2EsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnIDtcclxuaW1wb3J0IHsgRmx4VWlEYXRhdGFibGVTZXJ2aWNlIH0gZnJvbSAnLi4vZmx4LXVpLWRhdGF0YWJsZS5zZXJ2aWNlJztcclxuQFBpcGUoe1xyXG4gICAgbmFtZTonbGltaXR0ZXh0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTGltaXRUZXh0IGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybXtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzZXJ2aWNlOkZseFVpRGF0YXRhYmxlU2VydmljZSl7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zZm9ybShtYWlucHVsYXRpb25Db25maWc6T2JqZWN0LHRleHQ6c3RyaW5nKTpzdHJpbmd7XHJcbiAgICAgICAgbGV0IGZyb20gPSAobWFpbnB1bGF0aW9uQ29uZmlnLmhhc093blByb3BlcnR5KFwiZnJvbVwiKSkgPyBtYWlucHVsYXRpb25Db25maWdbJ2Zyb20nXSA6IDAgO1xyXG4gICAgICAgIGxldCB0byA9IChtYWlucHVsYXRpb25Db25maWcuaGFzT3duUHJvcGVydHkoXCJ0b1wiKSkgPyBtYWlucHVsYXRpb25Db25maWdbXCJ0b1wiXSA6IHRleHQubGVuZ3RoIDtcclxuICAgICAgICBsZXQgYXBwZW5kRG90cyA9IChtYWlucHVsYXRpb25Db25maWcuaGFzT3duUHJvcGVydHkoXCJhcHBlbmREb3RzXCIpKSA/IG1haW5wdWxhdGlvbkNvbmZpZ1tcImFwcGVuZERvdHNcIl0gOiBcIlwiIDtcclxuICAgICAgICBsZXQgdHh0OiBzdHJpbmcgPVwiXCIgO1xyXG4gICAgICAgIGlmKHRleHQubGVuZ3RoPnRvKXtcclxuICAgICAgICAgICAgdHh0ID0gdGV4dC5zdWJzdHJpbmcoZnJvbSx0bykrIGFwcGVuZERvdHMgO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICB0eHQgPSB0ZXh0IDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0eHQgO1xyXG4gICAgfVxyXG59Il19